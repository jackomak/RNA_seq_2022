totalTrades <- totalTrades + 1
trackTable[nrow(trackTable) + 1,] = c(totalTrades, "", "", "","", "")
trackTable[totalTrades, 2] <- rownames(nas100Raw[row,])
#Define buy in price, stop loss and take profit for each trade#
buyInPrice <- currentDayClosingPrice
stopLoss <- nas100Raw[row, 3]
takeprofit <- ((buyInPrice) + tpToSlRatio*(currentDayClosingPrice - nas100Raw[row, 3]))
#Reset number of days passed since trade was opened to 1#
daysPostTrade <- 1
#Assign criteria to check whether a trade has hit stop loss or take profit#
for (day in (row+daysPostTrade):nrow(nas100Raw)) {
dailyLow <- nas100Raw[(row+daysPostTrade), 3]
dailyHigh <- nas100Raw[(row+daysPostTrade), 2]
#If stop loss hit increase losing trade counter by one, and write losing trade to trade tracker#
if (dailyLow < stopLoss) {
losingTrades <- losingTrades + 1
trackTable[totalTrades, 3] <- rownames(nas100Raw[row+daysPostTrade,])
trackTable[totalTrades, 4] <- "L"
trackTable[totalTrades, 5] <- round((capital - (capital/100)),2)
trackTable[totalTrades, 6] <- daysPostTrade
capital <- capital - (capital/100)
daysPostTrade = 1
break }
else if (dailyHigh >= takeprofit) {
winningTrades <- winningTrades + 1
trackTable[totalTrades, 3] <- rownames(nas100Raw[row+daysPostTrade,])
trackTable[totalTrades, 4] <- "W"
trackTable[totalTrades, 5] <- round((capital + tpToSlRatio*(capital/100)),2)
trackTable[totalTrades, 6] <- daysPostTrade
capital <- capital + tpToSlRatio*(capital/100)
daysPostTrade = 1
break }
else {
daysPostTrade = daysPostTrade +1
next
}
}
}
}
########Trade Size#######
plot(trackTable$Cumulative_Gain)
########Trade Size#######
plot(trackTable$Trade_Date_Open, trackTable$Cumulative_Gain)
########Trade Size#######
plot(trackTable$Trade_Date_Open, trackTable$Cumulative_Gain)
########Trade Size#######
plot(trackTable$Cumulative_Gain)
########Trade Size#######
plot(trackTable$Cumulative_Gain[1:100])
########Trade Size#######
plot(trackTable$Cumulative_Gain[1:500])
########Trade Size#######
plot(trackTable$Cumulative_Gain[1:1000])
########Trade Size#######
plot(trackTable$Cumulative_Gain[1:1500])
########Trade Size#######
plot(trackTable$Cumulative_Gain[1:1750])
########Trade Size#######
plot(trackTable$Cumulative_Gain[1:2000])
########Trade Size#######
plot(trackTable$Cumulative_Gain)
########Trade Size#######
plot(trackTable$Cumulative_Gain[1:2500])
########Trade Size#######
plot(trackTable$Cumulative_Gain[1:2100])
########Trade Size#######
plot(trackTable$Cumulative_Gain[1:2200])
########Trade Size#######
plot(trackTable$Cumulative_Gain[1:2300])
########Trade Size#######
plot(trackTable$Cumulative_Gain[1:2400])
########Trade Size#######
plot(trackTable$Cumulative_Gain[1:2500])
########Trade Size#######
plot(trackTable$Cumulative_Gain)
View(trackTable)
########Trade Size#######
plot(trackTable$Cumulative_Gain[2000:2829])
########Trade Size#######
plot(trackTable$Cumulative_Gain[2500:2829])
View(trackTable)
########Trade Size#######
plot(trackTable$Cumulative_Gain[1885:2829])
View(trackTable)
View(trackTable)
##Benchmark##
benchNas <- nas100Raw
View(benchNas)
View(nas100Raw)
##Benchmark##
nasBenchMark <- nas100Raw$NDX.Open
##Benchmark##
nasBenchMark <- as.data.frame(nas100Raw$NDX.Open)
View(benchNas)
View(nasBenchMark)
View(nasBenchMark)
View(nas100Raw)
##Benchmark##
nasBenchMark <- nas100Raw[-2,-3,-4,-5,-6]
##Benchmark##
nasBenchMark <- nas100Raw$[-2,-3,-4,-5,-6]
nasBenchMark <- nasBenchMark[,1]
nasBenchMark <- as.data.frame(nasBenchMark[,1])
nasBenchMark <- as.data.frame(nasBenchMark[1,])
##Benchmark##
nasBenchMark <-nas100Raw
nasBenchMark[, -2,-3,-4,-5,-6] = NULL
nasBenchMark[, 2,3,4,5,6] = NULL
nasBenchMark[2,3,4,5,6] = NULL
nasBenchMark <- nasBenchMark[2,3,4,5,6] = NULL
nasBenchMark <- nasBenchMark[c(1)]
View(nasBenchMark)
plot(nasBenchMark)
plot(nasBenchMark$NDX.Open)
library(ggplot2)
library(ggplot2)
library(reshape2)
nasBenchMark <- melt(nasBenchMark)
View(nasBenchMark)
View(nasBenchMark)
View(nasBenchMark)
nasBenchMarkGraph <- ggplot(nasBenchMark, aes(x = variable, y = value))
plot(nasBenchMarkGraph)
View(nasBenchMark)
##Benchmark##
nasBenchMark <-nas100Raw
nasBenchMark <- nasBenchMark[c(1)]
View(nasBenchMark)
##Benchmark##
nasBenchMark <-nas100Raw
nasBenchMark <- nasBenchMark[c(1)]
nasBenchMark <- melt(nasBenchMark, "Row.names")
nasBenchMarkGraph <- ggplot(nasBenchMark, aes(x = variable, y = value))
plot(nasBenchMarkGraph)
View(nasBenchMark)
##Benchmark##
nasBenchMark <-nas100Raw
nasBenchMark <- nasBenchMark[c(1)]
nasBenchMark <- melt(nasBenchMark, "Row.names")
View(nasBenchMark)
##Benchmark##
nasBenchMark <-nas100Raw
nasBenchMark <- nasBenchMark[c(1)]
View(nasBenchMark)
nasBenchMarkGraph <- ggplot(nasBenchMark, aes(x = row.names(), y = value))
plot(nasBenchMarkGraph)
nasBenchMarkGraph <- ggplot(nasBenchMark, aes(x = row.names(nasBenchMark), y = value))
plot(nasBenchMarkGraph)
View(nasBenchMark)
nasBenchMarkGraph <- ggplot(nasBenchMark, aes(x = row.names(nasBenchMark), y = NDX.Open))
plot(nasBenchMarkGraph)
nasBenchMar <- nasBenchMark[seq(1, nrow(nasBenchMark), 10), ]
nasBenchMark <- nasBenchMark[seq(1, nrow(nasBenchMark), 10), ]
##Benchmark##
nasBenchMark <-nas100Raw
nasBenchMark <- as.data.frame(nasBenchMark[seq(1, nrow(nasBenchMark), 10), ])
nasBenchMark <- nasBenchMark[c(1)]
nasBenchMark <- melt(nasBenchMark, "Row.names")
nasBenchMarkGraph <- ggplot(nasBenchMark, aes(x = row.names(nasBenchMark), y = NDX.Open)) +
geom_point()
nas100Raw <- as.data.frame(getSymbols.yahoo(Symbols = "^NDX", from = 2010-01-01, to = Sys.Date(), periodicity = "daily", auto.assign = FALSE))
#Define Day Zero Stats#
losingTrades <- 0
winningTrades <- 0
totalTrades <- 0
capital <- 1000
tpToSlRatio <- 3
#Set up Time series tracking table#
trackTable <- data.frame("1","2","3","4","5","6")
colnames(trackTable) <-c("Trade_Number", "Trade_Date_Open", "Trade_Date_Close", "Winner_Loser", "Cumulative_Gain","Total_Trade_Duration")
trackTable <- trackTable[-1,]
#Iterate through every day in the rawData file#
for (row in 3:nrow(nas100Raw)) {
currentDayClosingPrice <- nas100Raw[row , 4]
prevDayClosingPrice <- nas100Raw[row-1, 4]
dayMinusTwoClosingPrice <- nas100Raw[row-2, 4]
#Open long if passes current criteria#
if ((currentDayClosingPrice > prevDayClosingPrice) & (prevDayClosingPrice > dayMinusTwoClosingPrice)) {
#Increase number of total trades and write new line to trade tracker data frame#
totalTrades <- totalTrades + 1
trackTable[nrow(trackTable) + 1,] = c(totalTrades, "", "", "","", "")
trackTable[totalTrades, 2] <- rownames(nas100Raw[row,])
#Define buy in price, stop loss and take profit for each trade#
buyInPrice <- currentDayClosingPrice
stopLoss <- nas100Raw[row, 3]
takeprofit <- ((buyInPrice) + tpToSlRatio*(currentDayClosingPrice - nas100Raw[row, 3]))
#Reset number of days passed since trade was opened to 1#
daysPostTrade <- 1
#Assign criteria to check whether a trade has hit stop loss or take profit#
for (day in (row+daysPostTrade):nrow(nas100Raw)) {
dailyLow <- nas100Raw[(row+daysPostTrade), 3]
dailyHigh <- nas100Raw[(row+daysPostTrade), 2]
#If stop loss hit increase losing trade counter by one, and write losing trade to trade tracker#
if (dailyLow < stopLoss) {
losingTrades <- losingTrades + 1
trackTable[totalTrades, 3] <- rownames(nas100Raw[row+daysPostTrade,])
trackTable[totalTrades, 4] <- "L"
trackTable[totalTrades, 5] <- round((capital - (capital/100)),2)
trackTable[totalTrades, 6] <- daysPostTrade
capital <- capital - (capital/100)
daysPostTrade = 1
break }
else if (dailyHigh >= takeprofit) {
winningTrades <- winningTrades + 1
trackTable[totalTrades, 3] <- rownames(nas100Raw[row+daysPostTrade,])
trackTable[totalTrades, 4] <- "W"
trackTable[totalTrades, 5] <- round((capital + tpToSlRatio*(capital/100)),2)
trackTable[totalTrades, 6] <- daysPostTrade
capital <- capital + tpToSlRatio*(capital/100)
daysPostTrade = 1
break }
else {
daysPostTrade = daysPostTrade +1
next
}
}
}
}
########Trade Size#######
plot(trackTable$Cumulative_Gain[1885:2829])
##Benchmark##
nasBenchMark <-nas100Raw
nasBenchMark <- as.data.frame(nasBenchMark[seq(1, nrow(nasBenchMark), 10), ])
nasBenchMark <- nasBenchMark[c(1)]
nasBenchMarkGraph <- ggplot(nasBenchMark, aes(x = row.names(nasBenchMark), y = NDX.Open)) +
geom_point()
plot(nasBenchMarkGraph)
View(trackTable)
View(nasBenchMark)
View(trackTable)
row.names(nasBenchMark) <- C("Trade_Date_Open")
rownames(nasBenchMark) <- C("Trade_Date_Open")
colnames(nasBenchMark) <- C("Trade_Date_Open")
colnames(nasBenchMark) <- "Trade_Date_Open"
View(nasBenchMark)
nasBenchMark <- merge(nasBenchMark, trackTable, by = Trade_Date_Open )
View(nasBenchMark)
View(trackTable)
View(trackTable)
View(nasBenchMark)
nasBenchMark <- merge(nasBenchMark, trackTable)
##Benchmark##
nasBenchMark <-nas100Raw
nasBenchMark <- as.data.frame(nasBenchMark[seq(1, nrow(nasBenchMark), 10), ])
nasBenchMark <- nasBenchMark[c(1)]
colnames(nasBenchMark) <- "Trade_Date_Open"
nasBenchMark <- merge(x = nasBenchMark, y = trackTable, by = Trade_Date_Open)
nasBenchMark <- merge(x = nasBenchMark, y = trackTable, by = nasBenchMark$Trade_Date_Open)
nasBenchMarkGraph <- ggplot(nasBenchMark, aes(x = row.names(nasBenchMark), y = NDX.Open)) +
geom_point()
nasBenchMark <- merge(x = nasBenchMark, y = trackTable, by = nasBenchMark$Trade_Date_Open, all.x = TRUE)
nasBenchMarkGraph <- ggplot(nasBenchMark, aes(x = row.names(nasBenchMark), y = NDX.Open)) +
geom_point()
nasBenchMark <- merge(x = nasBenchMark, y = trackTable, by ="Trade_Date_Open", all.x = TRUE)
nasBenchMarkGraph <- ggplot(nasBenchMark, aes(x = row.names(nasBenchMark), y = NDX.Open)) +
geom_point()
View(nasBenchMark)
##Benchmark##
nasBenchMark <-nas100Raw
nasBenchMark <- as.data.frame(nasBenchMark[seq(1, nrow(nasBenchMark), 10), ])
nasBenchMark <- nasBenchMark[c(1)]
colnames(nasBenchMark) <- "Trade_Date_Open"
nasBenchMark <- merge(x = nasBenchMark, y = trackTable, by ="Trade_Date_Open")
nasBenchMarkGraph <- ggplot(nasBenchMark, aes(x = row.names(nasBenchMark), y = NDX.Open)) +
geom_point()
View(nasBenchMark)
##Benchmark##
nasBenchMark <-nas100Raw
nasBenchMark <- as.data.frame(nasBenchMark[seq(1, nrow(nasBenchMark), 10), ])
nasBenchMark <- nasBenchMark[c(1)]
colnames(nasBenchMark) <- "Trade_Date_Open"
View(nasBenchMark)
View(trackTable)
View(trackTable)
##Benchmark##
nasBenchMark <-nas100Raw
nasBenchMark <- as.data.frame(nasBenchMark[seq(1, nrow(nasBenchMark), 10), ])
nasBenchMark <- nasBenchMark[c(1)]
View(nasBenchMark)
row.names(trackTable) <- trackTable(trackTable$Trade_Date_Open)
rownames(trackTable) <- trackTable$Trade_Date_Open
View(trackTable)
nasBenchMark <- merge(x = nasBenchMark, y =trackTable)
View(nasBenchMark)
View(nasBenchMark)
View(nasBenchMark)
nasBenchMark <- merge(x = nasBenchMark, y =trackTable, by = rownames(nasBenchMark))
##Benchmark##
nasBenchMark <-nas100Raw
nasBenchMark <- as.data.frame(nasBenchMark[seq(1, nrow(nasBenchMark), 10), ])
nasBenchMark <- nasBenchMark[c(1)]
rownames(trackTable) <- trackTable$Trade_Date_Open
nasBenchMark <- merge(x = nasBenchMark, y =trackTable, by = rownames(nasBenchMark))
View(nasBenchMark)
View(trackTable)
plot(rownames(trackTable), trackTable$Trade_Date_Close ,type="p",col="red")
plot(rownames(trackTable), trackTable$Trade_Date_Close ,type="l",col="red")
plot(trackTable)
View(nasBenchMark)
View(trackTable)
trackTableBenchmark <- trackTable[1]
View(trackTableBenchmark)
View(trackTable)
trackTableBenchmark <- trackTable[5]
View(trackTableBenchmark)
nasBenchMark <- merge(nasBenchMark, trackTable, by = rownames(nasBenchMark))
nasBenchMark <- merge(nasBenchMark, trackTable)
########Trade Size#######
plot(trackTable$Cumulative_Gain[1885:2829])
View(trackTable)
########Trade Size#######
plot(trackTable$Cumulative_Gain[2625:2829])
View(nas100Raw)
install.packages("readxl")
install.packages("shiny")
install.packages("Rtools")
install.packages("shinythemes")
shiny::runApp('~/GitHub/RNA_seq_2022/InteractiveRNASeq')
runApp('~/GitHub/RNA_seq_2022/InteractiveRNASeq')
runApp('~/GitHub/RNA_seq_2022/InteractiveRNASeq')
runApp('~/GitHub/RNA_seq_2022/InteractiveRNASeq')
runApp('~/GitHub/RNA_seq_2022/InteractiveRNASeq')
runApp('~/GitHub/RNA_seq_2022/InteractiveRNASeq')
runApp('~/GitHub/RNA_seq_2022/InteractiveRNASeq')
runApp('~/GitHub/RNA_seq_2022/InteractiveRNASeq')
runApp('~/GitHub/RNA_seq_2022/InteractiveRNASeq')
runApp('~/GitHub/RNA_seq_2022/InteractiveRNASeq')
runApp('~/GitHub/RNA_seq_2022/InteractiveRNASeq')
runApp('~/GitHub/RNA_seq_2022/InteractiveRNASeq')
runApp('~/GitHub/RNA_seq_2022/InteractiveRNASeq')
runApp('~/GitHub/RNA_seq_2022/InteractiveRNASeq')
runApp('~/GitHub/RNA_seq_2022/InteractiveRNASeq')
runApp('~/GitHub/RNA_seq_2022/InteractiveRNASeq')
runApp('~/GitHub/RNA_seq_2022/InteractiveRNASeq')
runApp('~/GitHub/RNA_seq_2022/InteractiveRNASeq')
runApp('~/GitHub/RNA_seq_2022/InteractiveRNASeq')
runApp('~/GitHub/RNA_seq_2022/InteractiveRNASeq')
runApp('~/GitHub/RNA_seq_2022/InteractiveRNASeq')
runApp('~/GitHub/RNA_seq_2022/InteractiveRNASeq')
runApp('~/GitHub/RNA_seq_2022/InteractiveRNASeq')
runApp('~/GitHub/RNA_seq_2022/InteractiveRNASeq')
runApp('~/GitHub/RNA_seq_2022/InteractiveRNASeq')
runApp('~/GitHub/RNA_seq_2022/InteractiveRNASeq')
runApp('~/GitHub/RNA_seq_2022/InteractiveRNASeq')
runApp('~/GitHub/RNA_seq_2022/InteractiveRNASeq')
runApp('~/GitHub/RNA_seq_2022/InteractiveRNASeq')
runApp('~/GitHub/RNA_seq_2022/InteractiveRNASeq')
runApp('~/GitHub/RNA_seq_2022/InteractiveRNASeq')
runApp('~/GitHub/RNA_seq_2022/InteractiveRNASeq')
runApp('~/GitHub/RNA_seq_2022/InteractiveRNASeq')
runApp('~/GitHub/RNA_seq_2022/InteractiveRNASeq')
runApp('~/GitHub/RNA_seq_2022/InteractiveRNASeq')
runApp('~/GitHub/RNA_seq_2022/InteractiveRNASeq')
runApp('~/GitHub/RNA_seq_2022/InteractiveRNASeq')
runApp('~/GitHub/RNA_seq_2022/InteractiveRNASeq')
runApp('~/GitHub/RNA_seq_2022/InteractiveRNASeq')
shiny::runApp('~/GitHub/RNA_seq_2022/InteractiveRNASeq')
install.packages(rsconnect)
install.packages("rsconnect")
shiny::runApp('~/GitHub/RNA_seq_2022/InteractiveRNASeq')
#libraries.
library(readxl)
library(clusterProfiler)
library(AnnotationDbi)
library(org.Dm.eg.db)
library(EnhancedVolcano)
#Read in MDEG's.
downregs <- read.csv("PtcG4_D6_V_RasYki_D5_All_Significant_Genes.csv", header = TRUE, row.names = 1)
#Read in MDEG's.
downregs <- read.csv("PtcG4_D6_V_RasYki_D5_All_Significant_Genes.csv", header = TRUE, row.names = 1)
#Read in MDEG's.
downregs <- read.csv("PtcG4_D6_V_RasYki_D5_All_Significant_Genes.csv", header = TRUE, row.names = 1)
setwd("D:/RNA-seq_stats/Differentially Expressed Genes (new scripts)/All Salivary Gland Samples")
#Read in MDEG's.
downregs <- read.csv("PtcG4_D6_V_RasYki_D5_All_Significant_Genes.csv", header = TRUE, row.names = 1)
#Convert Rownames to gene names.
upregs$symbol <- mapIds(org.Dm.eg.db, keys = rownames(upregs), keytype = "FLYBASE", column = "SYMBOL")
#Convert Rownames to gene names.
downregs$symbol <- mapIds(org.Dm.eg.db, keys = rownames(upregs), keytype = "FLYBASE", column = "SYMBOL")
#Convert Rownames to gene names.
downregs$symbol <- mapIds(org.Dm.eg.db, keys = rownames(downregs), keytype = "FLYBASE", column = "SYMBOL")
#Volcano.
volcano <-  EnhancedVolcano(downregs, x = "log2FoldChange", y = "padj", lab = downregs$symbol,
title = "Differentially Expressed Genes - RasYki Day 8",
legendLabels = c("Not Significant", "High Log2FC", "Significant (0.05)", "Significant + High Log2FC"),
legendPosition = "top",
labSize = 3,
drawConnectors = TRUE,
xlim = c(-8, 8)
pCutoff = 0.05)
plot(volcano)
#Volcano.
volcano <-  EnhancedVolcano(downregs, x = "log2FoldChange", y = "padj", lab = downregs$symbol,
title = "Differentially Expressed Genes - RasYki Day 8",
legendLabels = c("Not Significant", "High Log2FC", "Significant (0.05)", "Significant + High Log2FC"),
legendPosition = "top",
labSize = 3,
drawConnectors = TRUE,
xlim = c(-8, 8)
pCutoff = 0.05)
#Volcano.
volcano <-  EnhancedVolcano(downregs, x = "log2FoldChange", y = "padj", lab = downregs$symbol,
title = "Differentially Expressed Genes - RasYki Day 8",
legendLabels = c("Not Significant", "High Log2FC", "Significant (0.05)", "Significant + High Log2FC"),
legendPosition = "top",
labSize = 3,
drawConnectors = TRUE,
xlim = c(-8, 8),
pCutoff = 0.05)
plot(volcano)
#Read in MDEG's.
dregs <- read.csv("PtcG4_D6_V_RasYki_D5_DESEQ_Results.csv", header = TRUE, row.names = 1)
#Convert Rownames to gene names.
dregs$symbol <- mapIds(org.Dm.eg.db, keys = rownames(dregs), keytype = "FLYBASE", column = "SYMBOL")
#Volcano.
volcano <-  EnhancedVolcano(dregs, x = "log2FoldChange", y = "padj", lab = dregs$symbol,
title = "Differentially Expressed Genes - RasYki Day 8",
legendLabels = c("Not Significant", "High Log2FC", "Significant (0.05)", "Significant + High Log2FC"),
legendPosition = "top",
labSize = 3,
drawConnectors = TRUE,
xlim = c(-8, 8),
pCutoff = 0.05)
plot(volcano)
#Volcano.
volcano <-  EnhancedVolcano(dregs, x = "log2FoldChange", y = "padj", lab = dregs$symbol,
title = "Differentially Expressed Genes - RasYki Day 8",
legendLabels = c("Not Significant", "High Log2FC", "Significant (0.05)", "Significant + High Log2FC"),
legendPosition = "top",
labSize = 3,
drawConnectors = TRUE,
xlim = c(-8, 8),
ylim = c(0, 30),
pCutoff = 0.05)
plot(volcano)
#Volcano.
volcano <-  EnhancedVolcano(dregs, x = "log2FoldChange", y = "padj", lab = dregs$symbol,
title = "Differentially Expressed Genes - RasYki Day 6",
legendLabels = c("Not Significant", "High Log2FC", "Significant (0.05)", "Significant + High Log2FC"),
legendPosition = "top",
labSize = 3,
drawConnectors = TRUE,
xlim = c(-8, 8),
ylim = c(0, 30),
pCutoff = 0.05)
plot(volcano)
#Volcano.
volcano <-  EnhancedVolcano(dregs, x = "log2FoldChange", y = "padj", lab = dregs$symbol,
title = "Differentially Expressed Genes - RasYki Day 6",
legendLabels = c("Not Significant", "High Log2FC", "Significant (0.05)", "Significant + High Log2FC"),
legendPosition = "top",
labSize = 3,
drawConnectors = TRUE,
xlim = c(-8, 8),
ylim = c(0, 25),
pCutoff = 0.05)
plot(volcano)
#Read in MDEG's.
dregs <- read.csv("PtcG4_D6_V_RasYki_D8_DESEQ_Results.csv", header = TRUE, row.names = 1)
#Convert Rownames to gene names.
dregs$symbol <- mapIds(org.Dm.eg.db, keys = rownames(dregs), keytype = "FLYBASE", column = "SYMBOL")
#Volcano.
volcano <-  EnhancedVolcano(dregs, x = "log2FoldChange", y = "padj", lab = dregs$symbol,
title = "Differentially Expressed Genes - RasYki Day 6",
legendLabels = c("Not Significant", "High Log2FC", "Significant (0.05)", "Significant + High Log2FC"),
legendPosition = "top",
labSize = 3,
drawConnectors = TRUE,
xlim = c(-8, 8),
ylim = c(0, 25),
pCutoff = 0.05)
plot(volcano)
#Volcano.
volcano <-  EnhancedVolcano(dregs, x = "log2FoldChange", y = "padj", lab = dregs$symbol,
title = "Differentially Expressed Genes - RasYki Day 8",
legendLabels = c("Not Significant", "High Log2FC", "Significant (0.05)", "Significant + High Log2FC"),
legendPosition = "top",
labSize = 3,
drawConnectors = TRUE,
xlim = c(-8, 8),
ylim = c(0, 25),
pCutoff = 0.05)
plot(volcano)
#Volcano.
volcano <-  EnhancedVolcano(dregs, x = "log2FoldChange", y = "padj", lab = dregs$symbol,
title = "Differentially Expressed Genes - RasYki Day 8",
legendLabels = c("Not Significant", "High Log2FC", "Significant (0.05)", "Significant + High Log2FC"),
legendPosition = "top",
labSize = 3,
drawConnectors = TRUE,
xlim = c(-10, 10),
ylim = c(0, 25),
pCutoff = 0.05)
plot(volcano)
#Read in MDEG's.
dregs <- read.csv("PtcG4_D6_V_RasYki_D5_DESEQ_Results.csv", header = TRUE, row.names = 1)
#Read in MDEG's.
dregs <- read.csv("PtcG4_D6_V_RasYki_D5_DESEQ_Results.csv", header = TRUE, row.names = 1)
#Convert Rownames to gene names.
dregs$symbol <- mapIds(org.Dm.eg.db, keys = rownames(dregs), keytype = "FLYBASE", column = "SYMBOL")
#Volcano.
volcano <-  EnhancedVolcano(dregs, x = "log2FoldChange", y = "padj", lab = dregs$symbol,
title = "Differentially Expressed Genes - RasYki Day 6",
legendLabels = c("Not Significant", "High Log2FC", "Significant (0.05)", "Significant + High Log2FC"),
legendPosition = "top",
labSize = 3,
drawConnectors = TRUE,
xlim = c(-10, 10),
ylim = c(0, 25),
pCutoff = 0.05)
plot(volcano)
shiny::runApp('~/GitHub/RNA_seq_2022/InteractiveRNASeq')
