req(input$sampleinfo_file)
#Output file as dataframe to tab.
read.csv(file = input$sampleinfo_file$datapath, row.names = 1)
}, rownames = TRUE, striped = TRUE, bordered = TRUE, spacing = "s")
#If both files are uploaded, check to make sure both files are compatible for DEG analysis.
output$pre_normalisation_checker <- renderText({
req(input$rawcounts_file)
req(input$sampleinfo_file)
#Get colnames and rownames of relative files.
rawcountColnames <- as.list(colnames(read.csv(file = input$rawcounts_file$datapath, row.names = 1)))
sampleInfoRownames <- as.list(rownames(read.csv(file = input$sampleinfo_file$datapath, row.names = 1)))
#Check they match.
result = identical(rawcountColnames, sampleInfoRownames)
#Inform user of outcome.
if (result == TRUE){
successMessage <- "Files compatible!"}
else {
errorMessage <- "Files incompatible, please check col/row names match."
}})
output$normalisedCountTable <- renderTable({
})
})
}
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
install.packages(shinyWidgets)
install.packages("shinyWidgets")
install.packages("DT")
install.packages("shinyProgress")
install.packages("shinyBusy")
install.packages("shinyProgress")
install.packages("shinyBusy")
install.packages("shinybusy")
shiny::runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
shiny::runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp()
runApp()
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
output$downloadNormcounts <- downloadHandler(
filename = function() {paste("file", Sys.Date(), ".csv", sep = "")},
content = function(file){write.csv(output$normalisedCountTable)
})
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
tagList(
titlePanel(title = "Two-Way Differential Gene Expression:"),
sidebarLayout(sidebarPanel(h3("Mandatory Settings:"),
#Add option to input raw count matrix as CSV file.
fileInput(inputId = ns("rawcounts_file"),
label = "Select raw count matrix:",
multiple = FALSE,
accept = ".csv",
buttonLabel = "Browse",
placeholder = "No file selected."),
#Add option to input sample info file as CSC file.
fileInput(inputId = ns("sampleinfo_file"),
label = "Select sample information file:",
multiple = FALSE,
accept = ".csv",
buttonLabel = "Browse",
placeholder = "No file selected."),
#Add option for user to change minimum count threshold
numericInput(inputId = ns("minCountCutoff"),
label = "Minimum average expression cutoff:",
min = 1,
value = 30,
width = "150px")
),
mainPanel(tabsetPanel(type = "pills",
tabPanel("Pre-normalisation Checks",
#Verify files:
h2(textOutput(ns("pre_normalisation_checker"))),
#Uploaded header of rawcounts file.
h3("Raw Counts File:"),
tableOutput(ns("rawcounts_file_table")),
#Upload sample Information file.
h3("Sample Information File:"),
tableOutput(ns("sampleinfo_file_table"))),
#Create normalised count matrix using DESEQ2.
tabPanel("Normalised Counts",
h3("Once Pre-normalisation check are complete:"),
selectInput(inputId = ns("experimental_Condition"),
label = "Please select your experimental condtion:", choices = c(""), selected = ""),
actionButton(ns("generate_Normalised_Counts"), "Generate Normalised Count Table"),
tableOutput(ns("normalisedCountTable")),
add_busy_bar(color = "#FF0000"),
downloadButton(outputId = ns("normalisedCountTable"), label = "Download Normalised Count Matrix", class = NULL)),
tabPanel("Normalisation Quality Control")))))
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
tagList(
titlePanel(title = "Two-Way Differential Gene Expression:"),
sidebarLayout(sidebarPanel(h3("Mandatory Settings:"),
#Add option to input raw count matrix as CSV file.
fileInput(inputId = ns("rawcounts_file"),
label = "Select raw count matrix:",
multiple = FALSE,
accept = ".csv",
buttonLabel = "Browse",
placeholder = "No file selected."),
#Add option to input sample info file as CSC file.
fileInput(inputId = ns("sampleinfo_file"),
label = "Select sample information file:",
multiple = FALSE,
accept = ".csv",
buttonLabel = "Browse",
placeholder = "No file selected."),
#Add option for user to change minimum count threshold
numericInput(inputId = ns("minCountCutoff"),
label = "Minimum average expression cutoff:",
min = 1,
value = 30,
width = "150px")
),
mainPanel(tabsetPanel(type = "pills",
tabPanel("Pre-normalisation Checks",
#Verify files:
h2(textOutput(ns("pre_normalisation_checker"))),
#Uploaded header of rawcounts file.
h3("Raw Counts File:"),
tableOutput(ns("rawcounts_file_table")),
#Upload sample Information file.
h3("Sample Information File:"),
tableOutput(ns("sampleinfo_file_table"))),
#Create normalised count matrix using DESEQ2.
tabPanel("Normalised Counts",
h3("Once Pre-normalisation check are complete:"),
selectInput(inputId = ns("experimental_Condition"),
label = "Please select your experimental condtion:", choices = c(""), selected = ""),
actionButton(ns("generate_Normalised_Counts"), "Generate Normalised Count Table"),
tableOutput(outputId = ns("normalisedCountTable")),
add_busy_bar(color = "#FF0000"),
downloadButton(outputId = ns("downloadNormcounts"), label = "Download Normalised Count Matrix")),
#Visualisation and Quality control of normalised counts.
tabPanel("Normalisation Quality Control",
h3("Post Normalisation Quality Control:"),
p("Please make sure a normalised counts matrix has been generated
under the Normalised counts Tab prior to generating plots."),
h4("Generate PCA Plot:"),
actionButton(ns("Generate_PCA_Plot"), label = "Generate PCA Plot"),
plotOutput(outputId = ns("PCA_Plot")),
downloadButton(outputId = ns("downloadPCA"), label = "Save Plot")
)))))
shiny::runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
shiny::runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
source("D:/RNA-seq_DEG_Stats (2022 Experiment)/Differentially Expressed Genes (new scripts)/R Scripts2.0/PCA_Plot_Generator_V1.R")
shiny::runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
install.packages("ggpubr")
install.packages("KEGGREST")
install.packages("KEGGREST")
install.packages("KEGGREST")
install.packages("KEGGREST")
install.packages("EnrichmentBrowser")
install.packages("EnrichmentBrowser")
BiocManager::install("KEGGREST")
BiocManager::install("KEGGREST")
BiocManager::install("KEGGREST")
library("KEGGREST")
library("EnrichmentBrowser")
test <- keggList("dmel")
test <- keggList("dro")
test <- keggList("dme")
library("KEGGREST")
library("EnrichmentBrowser")
test <- keggList("dme")
install.packages("EnrichmentBrowser")
test <- keggList("Dme")
test <- keggList("dme")
#Libraries
library(readxl)
library(tidyverse)
library(ggpubr)
library(tidyr)
update.packages("vctrs")
remove.packages(vctrs)
remove.packages("vctrs")
remove.packages("vctrs")
shiny::runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp()
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp()
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
finalDEGList
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
tagList(
titlePanel(title = "Normalisation and DEG Analysis:"),
sidebarLayout(sidebarPanel(h3("Mandatory Settings:"),
#Add option to input raw count matrix as CSV file.
fileInput(inputId = ns("rawcounts_file"),
label = "Select raw count matrix:",
multiple = FALSE,
accept = ".csv",
buttonLabel = "Browse",
placeholder = "No file selected."),
#Add option to input sample info file as CSC file.
fileInput(inputId = ns("sampleinfo_file"),
label = "Select sample information file:",
multiple = FALSE,
accept = ".csv",
buttonLabel = "Browse",
placeholder = "No file selected."),
#Add option for user to change minimum count threshold
numericInput(inputId = ns("minCountCutoff"),
label = "Minimum average expression cutoff:",
min = 1,
value = 30,
width = "150px"),
#Add mandatory settings for Differential gene expression.
h3("Settings for DEG Analysis:"),
numericInput(inputId = ns("pvalueThreshold"),
label = ("P-value threshhold."),
min = 0.000001,
max = 1,
value = 0.05,
width = "150px"),
numericInput(inputId = ns("logFoldChangeThreshold"),
label = "Log2Fold Change threshold (As positive number).",
min = 0.001,
max = 100,
value = 1.4,
width = "150px")
),
mainPanel(tabsetPanel(type = c("tabs","pills)",
tabPanel("Pre-normalisation Checks",
#Verify files:
h2(textOutput(ns("pre_normalisation_checker"))),
#Uploaded header of rawcounts file.
h3("Raw Counts File:"),
tableOutput(ns("rawcounts_file_table")),
#Upload sample Information file.
h3("Sample Information File:"),
tableOutput(ns("sampleinfo_file_table"))),
#Create normalised count matrix using DESEQ2.
tabPanel("Normalised Counts",
h3("Once Pre-normalisation check are complete:"),
selectInput(inputId = ns("experimental_Condition"),
label = "Please select your experimental condtion:", choices = c(""), selected = ""),
actionButton(ns("generate_Normalised_Counts"), "Generate Normalised Count Table"),
tableOutput(outputId = ns("normalisedCountTable")),
add_busy_bar(color = "#FF0000"),
downloadButton(outputId = ns("downloadNormcounts"), label = "Download Normalised Count Matrix")),
#Visualisation and Quality control of normalised counts.
tabPanel("Normalisation Quality Control",
h3("Post Normalisation Quality Control:"),
p("Please make sure a normalised counts matrix has been generated
under the Normalised counts Tab prior to generating plots."),
h4("Generate PCA Plot:"),
actionButton(ns("Generate_PCA_Plot"), label = "Generate PCA Plot"),
plotOutput(outputId = ns("PCA_Plot")),
downloadButton(outputId = ns("downloadPCA"), label = "Save Plot")),
tabPanel("Differential Gene Expression Analysis",
h3("Mandatory Inputs:"),
selectInput(inputId = ns("DEGControlGroup"),
label = "Please choose control group for comparison.",
choices = c("NONE FOUND"), selected = "NONE FOUND"),
p("Select a control group to use as the baseline for identifying
differentially expressed genes"),
selectInput(inputId = ns("DEGTestGroup"),
label = "Please choose test group for comparison.",
choices = "NONE FOUND", selected = "NONE FOUND"),
p("Select a group to identify differentially expressed genes for against the above control."),
selectInput(inputId = ns("DEGGeneSet"),
label = "Choose gene set to identify:",
choices = c("Upregulated Genes", "Downregulated Genes", "All DEG's"),
selected = ("All DEG's")),
actionButton(ns("generateDEGs"), label = "Generate DEG List"),
h3("Differentially Expressed Genes based on your criteria:"),
downloadButton(outputId = ns("downloadDEGs"), label = "Download as CSV"),
tableOutput(outputId = ns("DEGList"))
)
)
)))
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
tagList(
titlePanel(title = "Normalisation and DEG Analysis:"),
sidebarLayout(sidebarPanel(h3("Mandatory Settings:"),
#Add option to input raw count matrix as CSV file.
fileInput(inputId = ns("rawcounts_file"),
label = "Select raw count matrix:",
multiple = FALSE,
accept = ".csv",
buttonLabel = "Browse",
placeholder = "No file selected."),
#Add option to input sample info file as CSC file.
fileInput(inputId = ns("sampleinfo_file"),
label = "Select sample information file:",
multiple = FALSE,
accept = ".csv",
buttonLabel = "Browse",
placeholder = "No file selected."),
#Add option for user to change minimum count threshold
numericInput(inputId = ns("minCountCutoff"),
label = "Minimum average expression cutoff:",
min = 1,
value = 30,
width = "150px"),
#Add mandatory settings for Differential gene expression.
h3("Settings for DEG Analysis:"),
numericInput(inputId = ns("pvalueThreshold"),
label = ("P-value threshhold."),
min = 0.000001,
max = 1,
value = 0.05,
width = "150px"),
numericInput(inputId = ns("logFoldChangeThreshold"),
label = "Log2Fold Change threshold (As positive number).",
min = 0.001,
max = 100,
value = 1.4,
width = "150px")
),
mainPanel(tabsetPanel(type = "tabs",
tabPanel("Pre-normalisation Checks",
#Verify files:
h2(textOutput(ns("pre_normalisation_checker"))),
#Uploaded header of rawcounts file.
h3("Raw Counts File:"),
tableOutput(ns("rawcounts_file_table")),
#Upload sample Information file.
h3("Sample Information File:"),
tableOutput(ns("sampleinfo_file_table"))),
#Create normalised count matrix using DESEQ2.
tabPanel("Normalised Counts",
h3("Once Pre-normalisation check are complete:"),
selectInput(inputId = ns("experimental_Condition"),
label = "Please select your experimental condtion:", choices = c(""), selected = ""),
actionButton(ns("generate_Normalised_Counts"), "Generate Normalised Count Table"),
tableOutput(outputId = ns("normalisedCountTable")),
add_busy_bar(color = "#FF0000"),
downloadButton(outputId = ns("downloadNormcounts"), label = "Download Normalised Count Matrix")),
#Visualisation and Quality control of normalised counts.
tabPanel("Normalisation Quality Control",
h3("Post Normalisation Quality Control:"),
p("Please make sure a normalised counts matrix has been generated
under the Normalised counts Tab prior to generating plots."),
h4("Generate PCA Plot:"),
actionButton(ns("Generate_PCA_Plot"), label = "Generate PCA Plot"),
plotOutput(outputId = ns("PCA_Plot")),
downloadButton(outputId = ns("downloadPCA"), label = "Save Plot")),
tabPanel("Differential Gene Expression Analysis",
h3("Mandatory Inputs:"),
selectInput(inputId = ns("DEGControlGroup"),
label = "Please choose control group for comparison.",
choices = c("NONE FOUND"), selected = "NONE FOUND"),
p("Select a control group to use as the baseline for identifying
differentially expressed genes"),
selectInput(inputId = ns("DEGTestGroup"),
label = "Please choose test group for comparison.",
choices = "NONE FOUND", selected = "NONE FOUND"),
p("Select a group to identify differentially expressed genes for against the above control."),
selectInput(inputId = ns("DEGGeneSet"),
label = "Choose gene set to identify:",
choices = c("Upregulated Genes", "Downregulated Genes", "All DEG's"),
selected = ("All DEG's")),
actionButton(ns("generateDEGs"), label = "Generate DEG List"),
h3("Differentially Expressed Genes based on your criteria:"),
downloadButton(outputId = ns("downloadDEGs"), label = "Download as CSV"),
tableOutput(outputId = ns("DEGList"))
)
)
)))
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
tagList(
titlePanel(title = "Heatmap Visualisation Tool:"),
sidebarLayout(sidebarPanel(h3("Mandatory Settings:"),
#Checkbox group to select which genotypes to include in the heatmap.
checkboxGroupInput(inputId = "genotypeSelector",
label = "Select genotypes for analysis:",
choiceNames = genotypesForAnalysisNames,
choiceValues = genotypesForAnalysisIDs,
selected = initallySelectedGenotypes),
#Checkbox to select which datasets to include in the heatmap.
checkboxGroupInput(inputId = "tissueSelector",
label = "Select tissues for analysis:",
choiceNames = tissueNames,
choiceValues = tissueValues,
selected = initallySelectedTissues),
#Box for user to copy Flybase geneID's they want to generate a heatmap for.
textAreaInput(inputId = "geneList",
label = "Enter Gene List as flybase ID's:",
placeholder = "Fbgn0000123...",
value = NULL,
height = 200,
cols = 1))),
mainPanel(tabsetPanel(type = "pills",
tabPanel("Get Differentially Expressed Genes"),
tableOutput(outputId = ns("normalisedCountTable")))
)),
)
shiny::runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
tagList(
titlePanel(title = "Heatmap Visualisation Tool:"),
sidebarLayout(sidebarPanel(h3("Mandatory Settings:"),
#Checkbox group to select which genotypes to include in the heatmap.
checkboxGroupInput(inputId = ns("genotypeSelector"),
label = "Select genotypes for analysis:",
choiceNames = genotypesForAnalysisNames,
choiceValues = genotypesForAnalysisIDs,
selected = initallySelectedGenotypes),
#Checkbox to select which datasets to include in the heatmap.
checkboxGroupInput(inputId = ns("tissueSelector"),
label = "Select tissues for analysis:",
choiceNames = tissueNames,
choiceValues = tissueValues,
selected = initallySelectedTissues),
#Box for user to copy Flybase geneID's they want to generate a heatmap for.
textAreaInput(inputId = ns("geneList"),
label = "Enter Gene List as flybase ID's:",
placeholder = "Fbgn0000123...",
value = NULL,
height = 200,
cols = 1),
#Checkbox to convert gene symbols to gene names on heatmap.
checkboxInput(inputId = ns("convertGeneIDs"),
label = "Convert Flybase IDs to gene names.",
value = FALSE)),
#Main Panel display for core heatmap.
mainPanel(tabsetPanel(type = "pills",
tabPanel("Log2 Fold Change Heatmap:"),
plotOutput(outputId = ns("mainHeatmap")))
)),
)
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
#Source String files:
source("./R/HeatmapStrings.R", local = TRUE)
#Source String files:
source("R/HeatmapStrings.R", local = TRUE)
setwd("D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential")
#Source String files:
source("./R/HeatmapStrings.R", local = TRUE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
