facet_grid(~Var1) +
theme(axis.text.x = element_text(angle = 90, hjust = 0), legend.position = "none", plot.title = element_text(hjust = 0.5)) +
ggtitle(paste0(i)) +
ylim(0, max(valuesForScale)) +
ylab("Normalised Count") +
scale_color_manual(values = geneotypeColors)
geneCountVisualsList[[i]] <- geneCountsVisual
}
#Combine graphs generated from each tissue dataset to generate final figure.
grid.arrange(geneCountVisualsList[[1]], geneCountVisualsList[[2]], geneCountVisualsList[[3]], nrow = 1)
library(gridExtra)
library(readxl)
#Set empty varibales.
normalisedCountsList<- list()
geneCountVisualsList <- list()
valuesForScale <- c()
setwd("~/GitHub/RNA_seq_2022/InteractiveRNASeq")
#Set empty varibales.
normalisedCountsList<- list()
geneCountVisualsList <- list()
valuesForScale <- c()
#Set color scale for each genotype.
geneotypeColors <- c("PtcG4_D6" = "#00BA38", "Yw_D5" = "#00BA38",
"RasYki_D5    " = "#F8766D", "RasYki_D8" = "#E68613",
"Fer12OG_D6" = "#00B8E7", "Fer12OG_D8" = "#00A9FF", "Fer12WT_D6" = "#8494FF",
"ImpL2i_D6" = "#ED68ED", "ImpL2i_D8" = "#FF61CC")
#Select gene to analyse using flybase ID. Can add functionality later to convert this to gene Name.
GeneID <- "FBgn0003964"
#Logic to assign the max normcount value from each of the three datasets for the gene of interest for y scale of graphs.
for (i in c("Wing Disc", "Salivary Gland", "Brain")){
#Read in databases from normalised count excel file. Each tissue dataset is stored on a seperate sheet.
normalisedCountsDatabase <- read_excel("All_Tissue_Normcounts.xlsx", sheet = i) %>% column_to_rownames("...1")
#Append the database to a list.
normalisedCountsList[[i]] <- normalisedCountsDatabase
#Grab Info for the gene of interest.
geneInfo <- melt(as.matrix(normalisedCountsDatabase[GeneID,]))
valuesForScale <- append(valuesForScale, geneInfo$value)
}
#Logic to generate matrix tables for each of the three tissue types and generate graphs for each. Outputs a list contianing all of the figures.
for (i in c("Wing Disc", "Salivary Gland", "Brain")){
#Grab the relevent database generated by the previous for loop.
normalisedCountsDatabase <- normalisedCountsList[[i]]
#Transform the matrix so graph can be generated using different genotypes.
geneInfo <- melt(as.matrix(normalisedCountsDatabase[GeneID,]))
#Rename genotypes.
geneInfo$Genotype <- ifelse(grepl("PtcG4_D6", geneInfo$Var2), "PtcG4_D6",
ifelse(grepl("Yw_D5", geneInfo$Var2), "Yw_D5",
ifelse(grepl("RasYki_D5", geneInfo$Var2), "RasYki_D5    ",
ifelse(grepl("RasYki_D8", geneInfo$Var2), "RasYki_D8",
ifelse(grepl("Fer12OG_D6", geneInfo$Var2), "Fer12OG_D6",
ifelse(grepl("Fer12OG_D8", geneInfo$Var2), "Fer12OG_D8",
ifelse(grepl("Fer12WT_D6", geneInfo$Var2), "Fer12WT_D6",
ifelse(grepl("ImpL2i_D6", geneInfo$Var2), "ImpL2i_D6", "ImpL2i_D8"))))))))
#Reorder Levels of genotype factor.
if (i == "Brain"){
geneInfo$Genotype <- factor(geneInfo$Genotype, levels = c("Yw_D5", "RasYki_D5    ", "RasYki_D8", "ImpL2i_D6", "ImpL2i_D8"))
}
else {
geneInfo$Genotype <- factor(geneInfo$Genotype, levels = c("PtcG4_D6", "RasYki_D5    ", "RasYki_D8", "Fer12OG_D6", "Fer12OG_D8", "Fer12WT_D6", "ImpL2i_D6", "ImpL2i_D8"))
}
#Generate Graph for each tissue type and append to geneCountVisualsList.
geneCountsVisual <- ggplot(geneInfo, aes(x = Genotype, y = value, color = Genotype)) +
geom_point() +
facet_grid(~Var1) +
theme(axis.text.x = element_text(angle = 90, hjust = 0), legend.position = "none", plot.title = element_text(hjust = 0.5)) +
ggtitle(paste0(i)) +
ylim(0, max(valuesForScale)) +
ylab("Normalised Count") +
scale_color_manual(values = geneotypeColors)
geneCountVisualsList[[i]] <- geneCountsVisual
}
#Libraries
library(tidyverse)
library(ggplot2)
library(gridExtra)
library(readxl)
#Set empty varibales.
normalisedCountsList<- list()
geneCountVisualsList <- list()
valuesForScale <- c()
#Set color scale for each genotype.
geneotypeColors <- c("PtcG4_D6" = "#00BA38", "Yw_D5" = "#00BA38",
"RasYki_D5    " = "#F8766D", "RasYki_D8" = "#E68613",
"Fer12OG_D6" = "#00B8E7", "Fer12OG_D8" = "#00A9FF", "Fer12WT_D6" = "#8494FF",
"ImpL2i_D6" = "#ED68ED", "ImpL2i_D8" = "#FF61CC")
#Select gene to analyse using flybase ID. Can add functionality later to convert this to gene Name.
GeneID <- "FBgn0003964"
#Logic to assign the max normcount value from each of the three datasets for the gene of interest for y scale of graphs.
for (i in c("Wing Disc", "Salivary Gland", "Brain")){
#Read in databases from normalised count excel file. Each tissue dataset is stored on a seperate sheet.
normalisedCountsDatabase <- read_excel("All_Tissue_Normcounts.xlsx", sheet = i) %>% column_to_rownames("...1")
#Append the database to a list.
normalisedCountsList[[i]] <- normalisedCountsDatabase
#Grab Info for the gene of interest.
geneInfo <- melt(as.matrix(normalisedCountsDatabase[GeneID,]))
valuesForScale <- append(valuesForScale, geneInfo$value)
}
#Logic to generate matrix tables for each of the three tissue types and generate graphs for each. Outputs a list contianing all of the figures.
for (i in c("Wing Disc", "Salivary Gland", "Brain")){
#Grab the relevent database generated by the previous for loop.
normalisedCountsDatabase <- normalisedCountsList[[i]]
#Transform the matrix so graph can be generated using different genotypes.
geneInfo <- melt(as.matrix(normalisedCountsDatabase[GeneID,]))
#Rename genotypes.
geneInfo$Genotype <- ifelse(grepl("PtcG4_D6", geneInfo$Var2), "PtcG4_D6",
ifelse(grepl("Yw_D5", geneInfo$Var2), "Yw_D5",
ifelse(grepl("RasYki_D5", geneInfo$Var2), "RasYki_D5    ",
ifelse(grepl("RasYki_D8", geneInfo$Var2), "RasYki_D8",
ifelse(grepl("Fer12OG_D6", geneInfo$Var2), "Fer12OG_D6",
ifelse(grepl("Fer12OG_D8", geneInfo$Var2), "Fer12OG_D8",
ifelse(grepl("Fer12WT_D6", geneInfo$Var2), "Fer12WT_D6",
ifelse(grepl("ImpL2i_D6", geneInfo$Var2), "ImpL2i_D6", "ImpL2i_D8"))))))))
#Reorder Levels of genotype factor.
if (i == "Brain"){
geneInfo$Genotype <- factor(geneInfo$Genotype, levels = c("Yw_D5", "RasYki_D5    ", "RasYki_D8", "ImpL2i_D6", "ImpL2i_D8"))
}
else {
geneInfo$Genotype <- factor(geneInfo$Genotype, levels = c("PtcG4_D6", "RasYki_D5    ", "RasYki_D8", "Fer12OG_D6", "Fer12OG_D8", "Fer12WT_D6", "ImpL2i_D6", "ImpL2i_D8"))
}
#Generate Graph for each tissue type and append to geneCountVisualsList.
geneCountsVisual <- ggplot(geneInfo, aes(x = Genotype, y = value, color = Genotype)) +
geom_point() +
facet_grid(~Var1) +
theme(axis.text.x = element_text(angle = 90, hjust = 0), legend.position = "none", plot.title = element_text(hjust = 0.5)) +
ggtitle(paste0(i)) +
ylim(0, max(valuesForScale)) +
ylab("Normalised Count") +
scale_color_manual(values = geneotypeColors)
geneCountVisualsList[[i]] <- geneCountsVisual
}
#Combine graphs generated from each tissue dataset to generate final figure.
grid.arrange(geneCountVisualsList[[1]], geneCountVisualsList[[2]], geneCountVisualsList[[3]], nrow = 1)
#Set empty varibales.
normalisedCountsList<- list()
geneCountVisualsList <- list()
valuesForScale <- c()
#Set color scale for each genotype.
geneotypeColors <- c("PtcG4_D6" = "#00BA38", "Yw_D5" = "#00BA38",
"RasYki_D5    " = "#F8766D", "RasYki_D8" = "#E68613",
"Fer12OG_D6" = "#00B8E7", "Fer12OG_D8" = "#00A9FF", "Fer12WT_D6" = "#8494FF",
"ImpL2i_D6" = "#ED68ED", "ImpL2i_D8" = "#FF61CC")
#Select gene to analyse using flybase ID. Can add functionality later to convert this to gene Name.
GeneID <- "FBgn0003964"
#Logic to assign the max normcount value from each of the three datasets for the gene of interest for y scale of graphs.
for (i in c("Wing Disc", "Salivary Gland", "Brain")){
#Read in databases from normalised count excel file. Each tissue dataset is stored on a seperate sheet.
normalisedCountsDatabase <- read_excel("All_Tissue_Normcounts.xlsx", sheet = i) %>% column_to_rownames("...1")
#Append the database to a list.
normalisedCountsList[[i]] <- normalisedCountsDatabase
#Grab Info for the gene of interest.
geneInfo <- melt(as.matrix(normalisedCountsDatabase[GeneID,]))
valuesForScale <- append(valuesForScale, geneInfo$value)
}
#Logic to generate matrix tables for each of the three tissue types and generate graphs for each. Outputs a list contianing all of the figures.
for (i in c("Wing Disc", "Salivary Gland", "Brain")){
#Grab the relevent database generated by the previous for loop.
normalisedCountsDatabase <- normalisedCountsList[[i]]
#Transform the matrix so graph can be generated using different genotypes.
geneInfo <- melt(as.matrix(normalisedCountsDatabase[GeneID,]))
#Rename genotypes.
geneInfo$Genotype <- ifelse(grepl("PtcG4_D6", geneInfo$Var2), "PtcG4_D6",
ifelse(grepl("Yw_D5", geneInfo$Var2), "Yw_D5",
ifelse(grepl("RasYki_D5", geneInfo$Var2), "RasYki_D5    ",
ifelse(grepl("RasYki_D8", geneInfo$Var2), "RasYki_D8",
ifelse(grepl("Fer12OG_D6", geneInfo$Var2), "Fer12OG_D6",
ifelse(grepl("Fer12OG_D8", geneInfo$Var2), "Fer12OG_D8",
ifelse(grepl("Fer12WT_D6", geneInfo$Var2), "Fer12WT_D6",
ifelse(grepl("ImpL2i_D6", geneInfo$Var2), "ImpL2i_D6", "ImpL2i_D8"))))))))
#Reorder Levels of genotype factor.
if (i == "Brain"){
geneInfo$Genotype <- factor(geneInfo$Genotype, levels = c("Yw_D5", "RasYki_D5    ", "RasYki_D8", "ImpL2i_D6", "ImpL2i_D8"))
}
else {
geneInfo$Genotype <- factor(geneInfo$Genotype, levels = c("PtcG4_D6", "RasYki_D5    ", "RasYki_D8", "Fer12OG_D6", "Fer12OG_D8", "Fer12WT_D6", "ImpL2i_D6", "ImpL2i_D8"))
}
#Generate Graph for each tissue type and append to geneCountVisualsList.
geneCountsVisual <- ggplot(geneInfo, aes(x = Genotype, y = value, color = Genotype)) +
geom_point() +
facet_grid(~Var1) +
theme(axis.text.x = element_text(angle = 90, hjust = 0), legend.position = "none", plot.title = element_text(hjust = 0.5)) +
ggtitle(paste0(i)) +
ylim(0, max(valuesForScale)) +
ylab("Normalised Count") +
scale_color_manual(values = geneotypeColors)
geneCountVisualsList[[i]] <- geneCountsVisual
}
#Combine graphs generated from each tissue dataset to generate final figure.
grid.arrange(geneCountVisualsList[[1]], geneCountVisualsList[[2]], geneCountVisualsList[[3]], nrow = 1)
#Libraries
library(tidyverse)
library(ggplot2)
library(gridExtra)
library(readxl)
#Libraries
library(tidyverse)
library(ggplot2)
library(gridExtra)
library(readxl)
#Set empty variables.
normalisedCountsList<- list()
geneCountVisualsList <- list()
valuesForScale <- c()
#Set color scale for each genotype.
geneotypeColors <- c("PtcG4_D6" = "#00BA38", "Yw_D5" = "#00BA38",
"RasYki_D5    " = "#F8766D", "RasYki_D8" = "#E68613",
"Fer12OG_D6" = "#00B8E7", "Fer12OG_D8" = "#00A9FF", "Fer12WT_D6" = "#8494FF",
"ImpL2i_D6" = "#ED68ED", "ImpL2i_D8" = "#FF61CC")
#Select gene to analyse using flybase ID. Can add functionality later to convert this to gene Name.
GeneID <- "FBgn0003964"
#Logic to assign the max normcount value from each of the three datasets for the gene of interest for y scale of graphs.
for (i in c("Wing Disc", "Salivary Gland", "Brain")){
#Read in databases from normalised count excel file. Each tissue dataset is stored on a seperate sheet.
normalisedCountsDatabase <- read_excel("All_Tissue_Normcounts.xlsx", sheet = i) %>% column_to_rownames("...1")
#Append the database to a list.
normalisedCountsList[[i]] <- normalisedCountsDatabase
#Grab Info for the gene of interest.
geneInfo <- melt(as.matrix(normalisedCountsDatabase[GeneID,]))
valuesForScale <- append(valuesForScale, geneInfo$value)
}
library(reshape2)
#Set empty variables.
normalisedCountsList<- list()
geneCountVisualsList <- list()
valuesForScale <- c()
#Set color scale for each genotype.
geneotypeColors <- c("PtcG4_D6" = "#00BA38", "Yw_D5" = "#00BA38",
"RasYki_D5    " = "#F8766D", "RasYki_D8" = "#E68613",
"Fer12OG_D6" = "#00B8E7", "Fer12OG_D8" = "#00A9FF", "Fer12WT_D6" = "#8494FF",
"ImpL2i_D6" = "#ED68ED", "ImpL2i_D8" = "#FF61CC")
#Select gene to analyse using flybase ID. Can add functionality later to convert this to gene Name.
GeneID <- "FBgn0003964"
#Logic to assign the max normcount value from each of the three datasets for the gene of interest for y scale of graphs.
for (i in c("Wing Disc", "Salivary Gland", "Brain")){
#Read in databases from normalised count excel file. Each tissue dataset is stored on a seperate sheet.
normalisedCountsDatabase <- read_excel("All_Tissue_Normcounts.xlsx", sheet = i) %>% column_to_rownames("...1")
#Append the database to a list.
normalisedCountsList[[i]] <- normalisedCountsDatabase
#Grab Info for the gene of interest.
geneInfo <- melt(as.matrix(normalisedCountsDatabase[GeneID,]))
valuesForScale <- append(valuesForScale, geneInfo$value)
}
#Logic to generate matrix tables for each of the three tissue types and generate graphs for each. Outputs a list contianing all of the figures.
for (i in c("Wing Disc", "Salivary Gland", "Brain")){
#Grab the relevent database generated by the previous for loop.
normalisedCountsDatabase <- normalisedCountsList[[i]]
#Transform the matrix so graph can be generated using different genotypes.
geneInfo <- melt(as.matrix(normalisedCountsDatabase[GeneID,]))
#Rename genotypes.
geneInfo$Genotype <- ifelse(grepl("PtcG4_D6", geneInfo$Var2), "PtcG4_D6",
ifelse(grepl("Yw_D5", geneInfo$Var2), "Yw_D5",
ifelse(grepl("RasYki_D5", geneInfo$Var2), "RasYki_D5    ",
ifelse(grepl("RasYki_D8", geneInfo$Var2), "RasYki_D8",
ifelse(grepl("Fer12OG_D6", geneInfo$Var2), "Fer12OG_D6",
ifelse(grepl("Fer12OG_D8", geneInfo$Var2), "Fer12OG_D8",
ifelse(grepl("Fer12WT_D6", geneInfo$Var2), "Fer12WT_D6",
ifelse(grepl("ImpL2i_D6", geneInfo$Var2), "ImpL2i_D6", "ImpL2i_D8"))))))))
#Reorder Levels of genotype factor.
if (i == "Brain"){
geneInfo$Genotype <- factor(geneInfo$Genotype, levels = c("Yw_D5", "RasYki_D5    ", "RasYki_D8", "ImpL2i_D6", "ImpL2i_D8"))
}
else {
geneInfo$Genotype <- factor(geneInfo$Genotype, levels = c("PtcG4_D6", "RasYki_D5    ", "RasYki_D8", "Fer12OG_D6", "Fer12OG_D8", "Fer12WT_D6", "ImpL2i_D6", "ImpL2i_D8"))
}
#Generate Graph for each tissue type and append to geneCountVisualsList.
geneCountsVisual <- ggplot(geneInfo, aes(x = Genotype, y = value, color = Genotype)) +
geom_point() +
facet_grid(~Var1) +
theme(axis.text.x = element_text(angle = 90, hjust = 0), legend.position = "none", plot.title = element_text(hjust = 0.5)) +
ggtitle(paste0(i)) +
ylim(0, max(valuesForScale)) +
ylab("Normalised Count") +
scale_color_manual(values = geneotypeColors)
geneCountVisualsList[[i]] <- geneCountsVisual
}
#Combine graphs generated from each tissue dataset to generate final figure.
grid.arrange(geneCountVisualsList[[1]], geneCountVisualsList[[2]], geneCountVisualsList[[3]], nrow = 1)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
#Libraries
library(tidyverse)
library(ggplot2)
library(gridExtra)
library(readxl)
library(reshape2)
#Set empty variables.
normalisedCountsList<- list()
geneCountVisualsList <- list()
valuesForScale <- c()
#Set color scale for each genotype.
geneotypeColors <- c("PtcG4_D6" = "#00BA38", "Yw_D5" = "#00BA38",
"RasYki_D5    " = "#F8766D", "RasYki_D8" = "#E68613",
"Fer12OG_D6" = "#00B8E7", "Fer12OG_D8" = "#00A9FF", "Fer12WT_D6" = "#8494FF",
"ImpL2i_D6" = "#ED68ED", "ImpL2i_D8" = "#FF61CC")
#Select gene to analyse using flybase ID. Can add functionality later to convert this to gene Name.
GeneID <- "FBgn0003964"
#Logic to assign the max normcount value from each of the three datasets for the gene of interest for y scale of graphs.
for (i in c("Wing Disc", "Salivary Gland", "Brain")){
#Read in databases from normalised count excel file. Each tissue dataset is stored on a seperate sheet.
normalisedCountsDatabase <- read_excel("All_Tissue_Normcounts.xlsx", sheet = i) %>% column_to_rownames("...1")
#Append the database to a list.
normalisedCountsList[[i]] <- normalisedCountsDatabase
#Grab Info for the gene of interest.
geneInfo <- melt(as.matrix(normalisedCountsDatabase[GeneID,]))
valuesForScale <- append(valuesForScale, geneInfo$value)
}
#Logic to assign the max normcount value from each of the three datasets for the gene of interest for y scale of graphs.
for (i in c("Wing Disc", "Salivary Gland", "Brain")){
#Read in databases from normalised count excel file. Each tissue dataset is stored on a seperate sheet.
normalisedCountsDatabase <- read_excel("All_Tissue_Normcounts.xlsx", sheet = i) %>% column_to_rownames("...1")
#Append the database to a list.
normalisedCountsList[[i]] <- normalisedCountsDatabase
#Grab Info for the gene of interest.
geneInfo <- melt(as.matrix(normalisedCountsDatabase[GeneID,]))
valuesForScale <- append(valuesForScale, geneInfo$value)
}
#Logic to generate matrix tables for each of the three tissue types and generate graphs for each. Outputs a list contianing all of the figures.
for (i in c("Wing Disc", "Salivary Gland", "Brain")){
#Grab the relevent database generated by the previous for loop.
normalisedCountsDatabase <- normalisedCountsList[[i]]
#Transform the matrix so graph can be generated using different genotypes.
geneInfo <- melt(as.matrix(normalisedCountsDatabase[GeneID,]))
#Rename genotypes.
geneInfo$Genotype <- ifelse(grepl("PtcG4_D6", geneInfo$Var2), "PtcG4_D6",
ifelse(grepl("Yw_D5", geneInfo$Var2), "Yw_D5",
ifelse(grepl("RasYki_D5", geneInfo$Var2), "RasYki_D5    ",
ifelse(grepl("RasYki_D8", geneInfo$Var2), "RasYki_D8",
ifelse(grepl("Fer12OG_D6", geneInfo$Var2), "Fer12OG_D6",
ifelse(grepl("Fer12OG_D8", geneInfo$Var2), "Fer12OG_D8",
ifelse(grepl("Fer12WT_D6", geneInfo$Var2), "Fer12WT_D6",
ifelse(grepl("ImpL2i_D6", geneInfo$Var2), "ImpL2i_D6", "ImpL2i_D8"))))))))
#Reorder Levels of genotype factor.
if (i == "Brain"){
geneInfo$Genotype <- factor(geneInfo$Genotype, levels = c("Yw_D5", "RasYki_D5    ", "RasYki_D8", "ImpL2i_D6", "ImpL2i_D8"))
}
else {
geneInfo$Genotype <- factor(geneInfo$Genotype, levels = c("PtcG4_D6", "RasYki_D5    ", "RasYki_D8", "Fer12OG_D6", "Fer12OG_D8", "Fer12WT_D6", "ImpL2i_D6", "ImpL2i_D8"))
}
#Generate Graph for each tissue type and append to geneCountVisualsList.
geneCountsVisual <- ggplot(geneInfo, aes(x = Genotype, y = value, color = Genotype)) +
geom_point() +
facet_grid(~Var1) +
theme(axis.text.x = element_text(angle = 90, hjust = 0), legend.position = "none", plot.title = element_text(hjust = 0.5)) +
ggtitle(paste0(i)) +
ylim(0, max(valuesForScale)) +
ylab("Normalised Count") +
scale_color_manual(values = geneotypeColors)
geneCountVisualsList[[i]] <- geneCountsVisual
}
#Combine graphs generated from each tissue dataset to generate final figure.
grid.arrange(geneCountVisualsList[[1]], geneCountVisualsList[[2]], geneCountVisualsList[[3]], nrow = 1)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
draw(geneCountVisualsList[[1]]+ geneCountVisualsList[[2]])
#Libraries
library(tidyverse)
library(ggplot2)
library(gridExtra)
library(readxl)
library(reshape2)
#Set empty variables.
normalisedCountsList<- list()
geneCountVisualsList <- list()
valuesForScale <- c()
#Set color scale for each genotype.
geneotypeColors <- c("PtcG4_D6" = "#00BA38", "Yw_D5" = "#00BA38",
"RasYki_D5    " = "#F8766D", "RasYki_D8" = "#E68613",
"Fer12OG_D6" = "#00B8E7", "Fer12OG_D8" = "#00A9FF", "Fer12WT_D6" = "#8494FF",
"ImpL2i_D6" = "#ED68ED", "ImpL2i_D8" = "#FF61CC")
#Select gene to analyse using flybase ID. Can add functionality later to convert this to gene Name.
GeneID <- "FBgn0003964"
#Logic to assign the max normcount value from each of the three datasets for the gene of interest for y scale of graphs.
for (i in c("Wing Disc", "Salivary Gland", "Brain")){
#Read in databases from normalised count excel file. Each tissue dataset is stored on a seperate sheet.
normalisedCountsDatabase <- read_excel("All_Tissue_Normcounts.xlsx", sheet = i) %>% column_to_rownames("...1")
#Append the database to a list.
normalisedCountsList[[i]] <- normalisedCountsDatabase
#Grab Info for the gene of interest.
geneInfo <- melt(as.matrix(normalisedCountsDatabase[GeneID,]))
valuesForScale <- append(valuesForScale, geneInfo$value)
}
#Logic to generate matrix tables for each of the three tissue types and generate graphs for each. Outputs a list contianing all of the figures.
for (i in c("Wing Disc", "Salivary Gland", "Brain")){
#Grab the relevent database generated by the previous for loop.
normalisedCountsDatabase <- normalisedCountsList[[i]]
#Transform the matrix so graph can be generated using different genotypes.
geneInfo <- melt(as.matrix(normalisedCountsDatabase[GeneID,]))
#Rename genotypes.
geneInfo$Genotype <- ifelse(grepl("PtcG4_D6", geneInfo$Var2), "PtcG4_D6",
ifelse(grepl("Yw_D5", geneInfo$Var2), "Yw_D5",
ifelse(grepl("RasYki_D5", geneInfo$Var2), "RasYki_D5    ",
ifelse(grepl("RasYki_D8", geneInfo$Var2), "RasYki_D8",
ifelse(grepl("Fer12OG_D6", geneInfo$Var2), "Fer12OG_D6",
ifelse(grepl("Fer12OG_D8", geneInfo$Var2), "Fer12OG_D8",
ifelse(grepl("Fer12WT_D6", geneInfo$Var2), "Fer12WT_D6",
ifelse(grepl("ImpL2i_D6", geneInfo$Var2), "ImpL2i_D6", "ImpL2i_D8"))))))))
#Reorder Levels of genotype factor.
if (i == "Brain"){
geneInfo$Genotype <- factor(geneInfo$Genotype, levels = c("Yw_D5", "RasYki_D5    ", "RasYki_D8", "ImpL2i_D6", "ImpL2i_D8"))
}
else {
geneInfo$Genotype <- factor(geneInfo$Genotype, levels = c("PtcG4_D6", "RasYki_D5    ", "RasYki_D8", "Fer12OG_D6", "Fer12OG_D8", "Fer12WT_D6", "ImpL2i_D6", "ImpL2i_D8"))
}
#Generate Graph for each tissue type and append to geneCountVisualsList.
geneCountsVisual <- ggplot(geneInfo, aes(x = Genotype, y = value, color = Genotype)) +
geom_point() +
facet_grid(~Var1) +
theme(axis.text.x = element_text(angle = 90, hjust = 0), legend.position = "none", plot.title = element_text(hjust = 0.5)) +
ggtitle(paste0(i)) +
ylim(0, max(valuesForScale)) +
ylab("Normalised Count") +
scale_color_manual(values = geneotypeColors)
geneCountVisualsList[[i]] <- geneCountsVisual
}
#Combine graphs generated from each tissue dataset to generate final figure.
grid.arrange(geneCountVisualsList[[1]], geneCountVisualsList[[2]], geneCountVisualsList[[3]], nrow = 1)
draw(geneCountVisualsList[[1]]+ geneCountVisualsList[[2]])
arrange(geneCountVisualsList[[1]] + geneCountVisualsList[[2]])
#Combine graphs generated from each tissue dataset to generate final figure.
final_figure <- grid.arrange(geneCountVisualsList[[1]], geneCountVisualsList[[2]], geneCountVisualsList[[3]], nrow = 1)
grid.draw(final_figure)
#Combine graphs generated from each tissue dataset to generate final figure.
final_figure <- grid.arrange(geneCountVisualsList[[1]], geneCountVisualsList[[2]], geneCountVisualsList[[3]], nrow = 1)
grid.draw(final_figure)
runApp()
#Combine graphs generated from each tissue dataset to generate final figure.
final_figure <- grid.arrange(arrangeGrob(geneCountVisualsList[[1]], geneCountVisualsList[[2]], geneCountVisualsList[[3]]), nrow = 1)
grid.draw(final_figure)
#Combine graphs generated from each tissue dataset to generate final figure.
final_figure <- grid.arrange(geneCountVisualsList[[1]], geneCountVisualsList[[2]], geneCountVisualsList[[3]]), nrow = 1)
grid.draw(final_figure)
#Combine graphs generated from each tissue dataset to generate final figure.
final_figure <- grid.arrange(geneCountVisualsList[[1]], geneCountVisualsList[[2]], geneCountVisualsList[[3]], nrow = 1)
grid.draw(final_figure)
grid.draw(final_figure)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
#Generate Graph for each tissue type and append to geneCountVisualsList.
geneCountsVisual <- ggplot(geneInfo, aes(x = Genotype, y = value, color = Genotype)) +
geom_point() +
facet_grid(~Var1) +
theme(axis.text.x = element_text(angle = 90, size = 15, hjust = 1), plot.title = element_text(hjust = 0.5, size = 20),
axis.text.y = element_text(angle = 0, size = 15)
legend.position = "none",
) +
ggtitle(paste0(i)) +
ylim(0, max(valuesForScale)) +
ylab("Normalised Count") +
scale_color_manual(values = geneotypeColors)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
