convertGeneIds <- TRUE # If TRUE geneIDs are converted to primary gene names in final heatmap.
#Read in raw log fold change databases for each tissue.
wdLfcTable <- read_excel(rawData, sheet = 1)
wdLfcTable <- left_join(wdLfcTable, geneNames, by = "GeneID")
wdLfcTable <- column_to_rownames(wdLfcTable, var = "GeneID")
sgLfcTable <- read_excel(rawData, sheet = 2)
sgLfcTable <- left_join(sgLfcTable, geneNames, by = "GeneID")
sgLfcTable <- column_to_rownames(sgLfcTable, var = "GeneID")
bLfcTable <- read_excel(rawData, sheet = 3)
bLfcTable <- left_join(bLfcTable, geneNames, by = "GeneID")
bLfcTable <- column_to_rownames(bLfcTable, var = "GeneID")
#Filter datasets to only include rows that user has specified in "genelist" variable.
wdLfcTable <- wdLfcTable[rownames(wdLfcTable) %in% geneList, ]
sgLfcTable <- sgLfcTable[rownames(sgLfcTable) %in% geneList, ]
bLfcTable <- bLfcTable[rownames(bLfcTable) %in% geneList, ]
#Remove unwanted tissue datasets#
genotypesForAnalysis <- append(genotypesForAnalysis, c("LFC", "Gene Name"))
wdLfcTable <- wdLfcTable[, colnames(wdLfcTable) %in% genotypesForAnalysis]
sgLfcTable <- sgLfcTable[, colnames(sgLfcTable) %in% genotypesForAnalysis]
bLfcTable <- bLfcTable[, colnames(bLfcTable) %in% genotypesForAnalysis]
#Select Which tissues to add to heatmap#
Wingdisc <- wdLfcTable
Salivarygland <- sgLfcTable
Brain <- bLfcTable
#Create Heatmap Color Scale.
colorScale <- colorRamp2(c(-3,0,3), c("blue", "white", "red"))
##HEATMAP GENERATOR LOOP##
heatmapList <- list()
for (tissue in tissuesForHeatmap) {
#Create normalised count level annotation.
ncValues <- get(as.name(tissue))[, colnames(get(as.name(tissue))) == "LFC"]
rowAnnotation <- rowAnnotation(LFC = anno_barplot(ncValues), border = TRUE)
#Create Core Heatmap database.
coreHeatmap <- get(as.name(tissue))[, colnames(get(as.name(tissue))) != "LFC"]
if (convertGeneIds == TRUE){
coreHeatmap <- rownames_to_column(coreHeatmap, var = "GeneID")
coreHeatmap <- column_to_rownames(coreHeatmap, var = "GeneName")
coreHeatmap$GeneID = NULL
} else {
coreHeatmap$GeneName = NULL
}
#Plot heatmap.
heatmap <- Heatmap(as.matrix(coreHeatmap),
col = colorScale,
column_title = tissue,
row_title = "Gene",
row_title_gp = gpar(col = "white"),
cluster_columns = FALSE,
column_title_side = "top",
row_title_side = "right",
name = "Log2Fold Change",
row_gap = unit(1, "mm"),
border = TRUE,
right_annotation = rowAnnotation,
column_names_rot = 90)
heatmapList <- append(heatmap, heatmapList)
}
View(coreHeatmap)
View(coreHeatmap)
coreHeatmap <- rownames_to_column(coreHeatmap, var = "GeneID")
#Create Core Heatmap database.
coreHeatmap <- get(as.name(tissue))[, colnames(get(as.name(tissue))) != c("LFC", "GeneName")]
if (convertGeneIds == TRUE){
coreHeatmap <- rownames_to_column(coreHeatmap, var = "GeneID")
coreHeatmap <- column_to_rownames(coreHeatmap, var = "GeneName")
coreHeatmap$GeneID = NULL
} else {
coreHeatmap$GeneName = NULL
}
View(coreHeatmap)
#Create Core Heatmap database.
coreHeatmap <- get(as.name(tissue))[, colnames(get(as.name(tissue))) != "LFC"]
if (convertGeneIds == TRUE){
coreHeatmap <- rownames_to_column(coreHeatmap, var = "GeneID")
coreHeatmap <- column_to_rownames(coreHeatmap, var = "GeneName")
coreHeatmap$GeneID = NULL
} else {
coreHeatmap$GeneName = NULL
}
library(circlize)
#Set raw data file and gene Name database#
rawData <- "ALL_Tissues_LFC_Database.xlsx"
geneNames <- read_excel(rawData, sheet = 4)
#VARIABLES TO SET#
geneList <- c("FBgn0015399", "FBgn0033395", "FBgn0026562") #A list of genes to generate a heatmap for.
tissuesForHeatmap <- c("Wingdisc", "Salivarygland", "Brain") #The tissues to include in the heatmap.
genotypesForAnalysis <- c("PtcG4_D6", "Yw_D5", "RasYki_D5", "RasYki_D8", "Fer12OG_D6", "Fer12OG_D8", "Fer12WT_D6", "ImpL2i_D6", "ImpL2i_D8") #The genotypes to include in the heatmap.
convertGeneIds <- TRUE # If TRUE geneIDs are converted to primary gene names in final heatmap.
#Read in raw log fold change databases for each tissue.
wdLfcTable <- read_excel(rawData, sheet = 1)
wdLfcTable <- left_join(wdLfcTable, geneNames, by = "GeneID")
wdLfcTable <- column_to_rownames(wdLfcTable, var = "GeneID")
sgLfcTable <- read_excel(rawData, sheet = 2)
sgLfcTable <- left_join(sgLfcTable, geneNames, by = "GeneID")
sgLfcTable <- column_to_rownames(sgLfcTable, var = "GeneID")
bLfcTable <- read_excel(rawData, sheet = 3)
bLfcTable <- left_join(bLfcTable, geneNames, by = "GeneID")
bLfcTable <- column_to_rownames(bLfcTable, var = "GeneID")
#Filter datasets to only include rows that user has specified in "genelist" variable.
wdLfcTable <- wdLfcTable[rownames(wdLfcTable) %in% geneList, ]
sgLfcTable <- sgLfcTable[rownames(sgLfcTable) %in% geneList, ]
bLfcTable <- bLfcTable[rownames(bLfcTable) %in% geneList, ]
View(sgLfcTable)
#Remove unwanted tissue datasets#
genotypesForAnalysis <- append(genotypesForAnalysis, c("LFC", "Gene Name"))
wdLfcTable <- wdLfcTable[, colnames(wdLfcTable) %in% genotypesForAnalysis]
sgLfcTable <- sgLfcTable[, colnames(sgLfcTable) %in% genotypesForAnalysis]
bLfcTable <- bLfcTable[, colnames(bLfcTable) %in% genotypesForAnalysis]
#Select Which tissues to add to heatmap#
Wingdisc <- wdLfcTable
Salivarygland <- sgLfcTable
Brain <- bLfcTable
View(Brain)
#Remove unwanted tissue datasets#
genotypesForAnalysis <- append(genotypesForAnalysis, c("LFC", "GeneName"))
wdLfcTable <- wdLfcTable[, colnames(wdLfcTable) %in% genotypesForAnalysis]
sgLfcTable <- sgLfcTable[, colnames(sgLfcTable) %in% genotypesForAnalysis]
bLfcTable <- bLfcTable[, colnames(bLfcTable) %in% genotypesForAnalysis]
#Set raw data file and gene Name database#
rawData <- "ALL_Tissues_LFC_Database.xlsx"
geneNames <- read_excel(rawData, sheet = 4)
#VARIABLES TO SET#
geneList <- c("FBgn0015399", "FBgn0033395", "FBgn0026562") #A list of genes to generate a heatmap for.
tissuesForHeatmap <- c("Wingdisc", "Salivarygland", "Brain") #The tissues to include in the heatmap.
genotypesForAnalysis <- c("PtcG4_D6", "Yw_D5", "RasYki_D5", "RasYki_D8", "Fer12OG_D6", "Fer12OG_D8", "Fer12WT_D6", "ImpL2i_D6", "ImpL2i_D8") #The genotypes to include in the heatmap.
convertGeneIds <- TRUE # If TRUE geneIDs are converted to primary gene names in final heatmap.
#Read in raw log fold change databases for each tissue.
wdLfcTable <- read_excel(rawData, sheet = 1)
wdLfcTable <- left_join(wdLfcTable, geneNames, by = "GeneID")
wdLfcTable <- column_to_rownames(wdLfcTable, var = "GeneID")
sgLfcTable <- read_excel(rawData, sheet = 2)
sgLfcTable <- left_join(sgLfcTable, geneNames, by = "GeneID")
sgLfcTable <- column_to_rownames(sgLfcTable, var = "GeneID")
bLfcTable <- read_excel(rawData, sheet = 3)
bLfcTable <- left_join(bLfcTable, geneNames, by = "GeneID")
bLfcTable <- column_to_rownames(bLfcTable, var = "GeneID")
#Filter datasets to only include rows that user has specified in "genelist" variable.
wdLfcTable <- wdLfcTable[rownames(wdLfcTable) %in% geneList, ]
sgLfcTable <- sgLfcTable[rownames(sgLfcTable) %in% geneList, ]
bLfcTable <- bLfcTable[rownames(bLfcTable) %in% geneList, ]
#Remove unwanted tissue datasets#
genotypesForAnalysis <- append(genotypesForAnalysis, c("LFC", "GeneName"))
wdLfcTable <- wdLfcTable[, colnames(wdLfcTable) %in% genotypesForAnalysis]
sgLfcTable <- sgLfcTable[, colnames(sgLfcTable) %in% genotypesForAnalysis]
bLfcTable <- bLfcTable[, colnames(bLfcTable) %in% genotypesForAnalysis]
#Select Which tissues to add to heatmap#
Wingdisc <- wdLfcTable
Salivarygland <- sgLfcTable
Brain <- bLfcTable
View(bLfcTable)
#Create Heatmap Color Scale.
colorScale <- colorRamp2(c(-3,0,3), c("blue", "white", "red"))
##HEATMAP GENERATOR LOOP##
heatmapList <- list()
for (tissue in tissuesForHeatmap) {
#Create normalised count level annotation.
ncValues <- get(as.name(tissue))[, colnames(get(as.name(tissue))) == "LFC"]
rowAnnotation <- rowAnnotation(LFC = anno_barplot(ncValues), border = TRUE)
#Create Core Heatmap database.
coreHeatmap <- get(as.name(tissue))[, colnames(get(as.name(tissue))) != "LFC"]
if (convertGeneIds == TRUE){
coreHeatmap <- rownames_to_column(coreHeatmap, var = "GeneID")
coreHeatmap <- column_to_rownames(coreHeatmap, var = "GeneName")
coreHeatmap$GeneID = NULL
} else {
coreHeatmap$GeneName = NULL
}
#Plot heatmap.
heatmap <- Heatmap(as.matrix(coreHeatmap),
col = colorScale,
column_title = tissue,
row_title = "Gene",
row_title_gp = gpar(col = "white"),
cluster_columns = FALSE,
column_title_side = "top",
row_title_side = "right",
name = "Log2Fold Change",
row_gap = unit(1, "mm"),
border = TRUE,
right_annotation = rowAnnotation,
column_names_rot = 90)
heatmapList <- append(heatmap, heatmapList)
}
#Plot Heat map Based on Tissues Provided.
HeatmapListLength <- length(heatmapList)
if(HeatmapListLength == 1) {
plot(heatmapList[[1]])
} else if (HeatmapListLength == 2) {
plot(heatmapList[[2]] + heatmapList[[1]])
} else {
plot(heatmapList[[3]] + heatmapList[[2]] + heatmapList[[1]])
}
convertGeneIds <- FALSE # If TRUE geneIDs are converted to primary gene names in final heatmap.
#Read in raw log fold change databases for each tissue.
wdLfcTable <- read_excel(rawData, sheet = 1)
wdLfcTable <- left_join(wdLfcTable, geneNames, by = "GeneID")
wdLfcTable <- column_to_rownames(wdLfcTable, var = "GeneID")
sgLfcTable <- read_excel(rawData, sheet = 2)
sgLfcTable <- left_join(sgLfcTable, geneNames, by = "GeneID")
sgLfcTable <- column_to_rownames(sgLfcTable, var = "GeneID")
bLfcTable <- read_excel(rawData, sheet = 3)
bLfcTable <- left_join(bLfcTable, geneNames, by = "GeneID")
bLfcTable <- column_to_rownames(bLfcTable, var = "GeneID")
#Filter datasets to only include rows that user has specified in "genelist" variable.
wdLfcTable <- wdLfcTable[rownames(wdLfcTable) %in% geneList, ]
sgLfcTable <- sgLfcTable[rownames(sgLfcTable) %in% geneList, ]
bLfcTable <- bLfcTable[rownames(bLfcTable) %in% geneList, ]
#Remove unwanted tissue datasets#
genotypesForAnalysis <- append(genotypesForAnalysis, c("LFC", "GeneName"))
wdLfcTable <- wdLfcTable[, colnames(wdLfcTable) %in% genotypesForAnalysis]
sgLfcTable <- sgLfcTable[, colnames(sgLfcTable) %in% genotypesForAnalysis]
bLfcTable <- bLfcTable[, colnames(bLfcTable) %in% genotypesForAnalysis]
#Select Which tissues to add to heatmap#
Wingdisc <- wdLfcTable
Salivarygland <- sgLfcTable
Brain <- bLfcTable
#Create Heatmap Color Scale.
colorScale <- colorRamp2(c(-3,0,3), c("blue", "white", "red"))
##HEATMAP GENERATOR LOOP##
heatmapList <- list()
for (tissue in tissuesForHeatmap) {
#Create normalised count level annotation.
ncValues <- get(as.name(tissue))[, colnames(get(as.name(tissue))) == "LFC"]
rowAnnotation <- rowAnnotation(LFC = anno_barplot(ncValues), border = TRUE)
#Create Core Heatmap database.
coreHeatmap <- get(as.name(tissue))[, colnames(get(as.name(tissue))) != "LFC"]
if (convertGeneIds == TRUE){
coreHeatmap <- rownames_to_column(coreHeatmap, var = "GeneID")
coreHeatmap <- column_to_rownames(coreHeatmap, var = "GeneName")
coreHeatmap$GeneID = NULL
} else {
coreHeatmap$GeneName = NULL
}
#Plot heatmap.
heatmap <- Heatmap(as.matrix(coreHeatmap),
col = colorScale,
column_title = tissue,
row_title = "Gene",
row_title_gp = gpar(col = "white"),
cluster_columns = FALSE,
column_title_side = "top",
row_title_side = "right",
name = "Log2Fold Change",
row_gap = unit(1, "mm"),
border = TRUE,
right_annotation = rowAnnotation,
column_names_rot = 90)
heatmapList <- append(heatmap, heatmapList)
}
#Plot Heat map Based on Tissues Provided.
HeatmapListLength <- length(heatmapList)
if(HeatmapListLength == 1) {
plot(heatmapList[[1]])
} else if (HeatmapListLength == 2) {
plot(heatmapList[[2]] + heatmapList[[1]])
} else {
plot(heatmapList[[3]] + heatmapList[[2]] + heatmapList[[1]])
}
runApp()
runApp()
runApp()
runApp()
coreHeatmap <- column_to_rownames(coreHeatmap, var = "GeneName")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
#Shiny packages ----
library(shiny)
library(shinythemes)
#core packages for data visualization ----
library(ComplexHeatmap)
library(tidyverse)
library(readxl)
library(circlize)
#Set core variable lists ----
rawData <- "ALL_Tissues_LFC_Database.xlsx"
rawDataColnames <- colnames(read_excel(rawData, sheet = 1, col_names = TRUE))
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
MAData <- read_excel("All_Tissues_LFC_Database.xlsx", sheet = 4)
FHData <- read_excel("All_Tissues_LFC_Database.xlsx", sheet = 1)
fullData <- full_join(MAData, FHData, by = "GeneID")
View(fullData)
fullData[, 7:14] = NULL
View(fullData)
write.csv(fullData, "Updated_MA_Data.csv")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
#Read 1st Sheet.
rawdata <- read_excel("Mardellehh_to_merge.csv.xlsx", sheet = 1)
library(tidyverse)
library(readxl)
#Read 1st Sheet.
rawdata <- read_excel("Mardellehh_to_merge.csv.xlsx", sheet = 1)
View(rawdata)
View(rawdata)
#Read and merge next sheets.
sheetToMerge <- read_excel("RawLFC_Needs_Formatting.xlsx", sheet = 5)
#Read and merge next sheets.
sheetToMerge <- read_excel("ALL_Tissues_LFC_Database.xlsx", sheet = 5)
#Read and merge next sheets.
sheetToMerge <- read_excel("ALL_Tissues_LFC_Database.xlsx", sheet = 4)
View(sheetToMerge)
#Read and merge next sheets.
sheetToMerge <- read_excel("ALL_Tissues_LFC_Database.xlsx", sheet = 6)
View(sheetToMerge)
View(rawdata)
View(sheetToMerge)
View(rawdata)
#Read and merge next sheets.
sheetToMerge <- read_excel("ALL_Tissues_LFC_Database.xlsx", sheet = 7)
#Read and merge next sheets.
sheetToMerge <- read_excel("ALL_Tissues_LFC_Database.xlsx", sheet = 6)
rawdata <- merge(rawdata, sheetToMerge, by = "GeneID")
View(rawdata)
rawdata[,3] = NULL
View(rawdata)
replace_na(rawdata, 0)
replace_na(rawdata, NA, 0)
rawdata[is.na(rawdata)] = 0
View(rawdata)
write.csv(rawdata, "Mardellehh_to_merge.csv")
library(tidyverse)
library(readxl)
#Read 1st Sheet.
rawdata <- read_excel("Mardelle_rasscrib_eyes.xlsx", sheet = 1)
lookup <- read_excel("Mardelle_rasscrib_eyes.xlsx", sheet = 6)
lookup <- read_excel("All_Tisses_LFC_Database.xlsx", sheet = 6)
lookup <- read_excel("ALL_Tisses_LFC_Database.xlsx", sheet = 6)
lookup <- read_excel("ALL_Tissues_LFC_Database.xlsx", sheet = 6)
rawdata <- left_join(x = lookup, y = rawdata, By = "GeneID"))
rawdata <- left_join(x = lookup, y = rawdata, By = "GeneID")
rawdata <- left_join(x = lookup, y = rawdata, By = "GeneID")
#Read 1st Sheet.
rawdata <- read_excel("Mardelle_rasscrib_eyes.xlsx", sheet = 1)
lookup <- read_excel("ALL_Tissues_LFC_Database.xlsx", sheet = 6)
rawdata <- left_join(x = lookup, y = rawdata, By = "GeneID")
View(rawdata)
rawdata[2] = NULL
#Read 1st Sheet.
rawdata <- read_excel("Mardelle_rasscrib_eyes.xlsx", sheet = 1)
lookup <- read_excel("ALL_Tissues_LFC_Database.xlsx", sheet = 6)
rawdata <- left_join(x = lookup, y = rawdata, By = "GeneID")
("Mardelle_rasscrib_eyes.xlsx", sheet = 1)
rawdata <- left_join(y = lookup, x = rawdata, By = "GeneID")
rawdata[2] =
#Read 1st Sheet.
rawdata <- read_excel("Mardelle_rasscrib_eyes.xlsx", sheet = 1)
lookup <- read_excel("ALL_Tissues_LFC_Database.xlsx", sheet = 6)
rawdata <- left_join(y = lookup, x = rawdata, By = "GeneID")
rawdata[2] = NULL
rawdata[is.na(rawdata)] = 0
View(rawdata)
#Read 1st Sheet.
rawdata <- read_excel("Mardelle_rasscrib_eyes.xlsx", sheet = 1)
lookup <- read_excel("ALL_Tissues_LFC_Database.xlsx", sheet = 6)
rawdata <- left_join(y = lookup, x = rawdata, By = "GeneID")
View(rawdata)
rawdata[3] = NULL
rawdata[is.na(rawdata)] = 0
write.csv(rawdata, "Mardelle_eye_discs_for_merger.csv")
#Shiny packages ----
library(shiny)
library(shinythemes)
#core packages for data visualization ----
library(ComplexHeatmap)
library(tidyverse)
library(readxl)
library(circlize)
runApp()
runApp()
runApp()
runApp()
runApp()
#Shiny packages ----
library(shiny)
library(shinythemes)
#core packages for data visualization ----
library(ComplexHeatmap)
library(tidyverse)
library(readxl)
library(circlize)
runApp()
#Set core variable lists ----
rawData <- "ALL_Tissues_LFC_Database.xlsx"
rawDataColnames <- read_excel(rawData, sheet = 1, )
genotypesForAnalysisNames <- list("RasYki (D5)","RasYki (D8)","Feritin (D6)",
"Feritin (D8)", "Feritin WT looking (D6)",
"ImpL2 RNAi (D6)", "ImpL2 RNAi (D8)", "Wts (D6)",
"Wts (D8)", "Cic Wts (D6)", "Cic Wts (D8)")
genotypesForAnalysisIDs <- list("RasYki_D5","RasYki_D8","Fer12OG_D6",
"Fer12OG_D8","Fer12WT_D6","ImpL2i_D6",
"ImpL2i_D8", "WtsD6","WtsD9","CicWtsD6","CicWtsD9")
initallySelectedGenotypes <- list("RasYki_D5", "RasYki_D8", "Fer12OG_D6", "Fer12OG_D8")
tissueNames <- list("FH 2022 Wing disc", "FH 2022 Salivary Gland", "FH 2022 Brain", "MA 2016 Wing Disc")
tissueValues <- list("Wingdisc", "Salivarygland", "Brain", "Mardelle_CicWts_WD")
initallySelectedTissues <- list("Wingdisc", "Salivarygland", "Brain")
#Set path to raw data folder and load in geneNames conversion sheet.
geneNames <- read_excel(rawData, sheet = 5)
#Search User input for genes using REGEX.
regFilter <- regex("FBGN\\d\\d\\d\\d\\d\\d\\d", ignore_case = TRUE, )
#Set path to raw data folder and load in geneNames conversion sheet.
geneNames <- read_excel(rawData, sheet = 7)
#Set path to raw data folder and load in geneNames conversion sheet.
geneNames <- read_excel(rawData, sheet = 7)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
library(readxl)
lookup <- read_excel("All_Tissues_LFC_Database.xlsx", sheet = 5)
rawdata <- read_excel("All_Tissues_LFC_Database.xlsx", sheet = 1)
lookup <- read_excel("All_Tissues_LFC_Database.xlsx", sheet = 5)
View(lookup)
merged <- left_join(rawdata, lookup, by = "GeneID")
View(merged)
View(merged)
View(rawdata)
rawdata <- read_excel("All_Tissues_LFC_Database.xlsx", sheet = 1)
lookup <- read_excel("All_Tissues_LFC_Database.xlsx", sheet = 5)
View(lookup)
merged <- l_join(rawdata, lookup, by = "GeneID")
merged <- left_join(rawdata, lookup, by = "GeneID")
View(merged)
merged[, 2:9] = NULL
View(merged)
write.csv(merged, "To_Merge_hhWingDisc.csv")
rawdata <- read_excel("All_Tissues_LFC_Database.xlsx", sheet = 1)
lookup <- read_excel("All_Tissues_LFC_Database.xlsx", sheet = 6)
merged <- left_join(rawdata, lookup, by = "GeneID")
merged[, 2:9] = NULL
write.csv(merged, "To_Merge_hhWingDisc.csv")
View(merged)
write.csv(merged, "To_Merge_hhEyeDisc.csv")
runApp()
runApp()
shiny::runApp()
shiny::runApp()
install.packages("logger")
shiny::runApp()
runApp()
shiny::runApp()
cat("Set raw database as variable: rawData.")
shiny::runApp()
