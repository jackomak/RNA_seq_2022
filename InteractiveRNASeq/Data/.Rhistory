runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp()
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp()
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
finalDEGList
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
tagList(
titlePanel(title = "Normalisation and DEG Analysis:"),
sidebarLayout(sidebarPanel(h3("Mandatory Settings:"),
#Add option to input raw count matrix as CSV file.
fileInput(inputId = ns("rawcounts_file"),
label = "Select raw count matrix:",
multiple = FALSE,
accept = ".csv",
buttonLabel = "Browse",
placeholder = "No file selected."),
#Add option to input sample info file as CSC file.
fileInput(inputId = ns("sampleinfo_file"),
label = "Select sample information file:",
multiple = FALSE,
accept = ".csv",
buttonLabel = "Browse",
placeholder = "No file selected."),
#Add option for user to change minimum count threshold
numericInput(inputId = ns("minCountCutoff"),
label = "Minimum average expression cutoff:",
min = 1,
value = 30,
width = "150px"),
#Add mandatory settings for Differential gene expression.
h3("Settings for DEG Analysis:"),
numericInput(inputId = ns("pvalueThreshold"),
label = ("P-value threshhold."),
min = 0.000001,
max = 1,
value = 0.05,
width = "150px"),
numericInput(inputId = ns("logFoldChangeThreshold"),
label = "Log2Fold Change threshold (As positive number).",
min = 0.001,
max = 100,
value = 1.4,
width = "150px")
),
mainPanel(tabsetPanel(type = c("tabs","pills)",
tabPanel("Pre-normalisation Checks",
#Verify files:
h2(textOutput(ns("pre_normalisation_checker"))),
#Uploaded header of rawcounts file.
h3("Raw Counts File:"),
tableOutput(ns("rawcounts_file_table")),
#Upload sample Information file.
h3("Sample Information File:"),
tableOutput(ns("sampleinfo_file_table"))),
#Create normalised count matrix using DESEQ2.
tabPanel("Normalised Counts",
h3("Once Pre-normalisation check are complete:"),
selectInput(inputId = ns("experimental_Condition"),
label = "Please select your experimental condtion:", choices = c(""), selected = ""),
actionButton(ns("generate_Normalised_Counts"), "Generate Normalised Count Table"),
tableOutput(outputId = ns("normalisedCountTable")),
add_busy_bar(color = "#FF0000"),
downloadButton(outputId = ns("downloadNormcounts"), label = "Download Normalised Count Matrix")),
#Visualisation and Quality control of normalised counts.
tabPanel("Normalisation Quality Control",
h3("Post Normalisation Quality Control:"),
p("Please make sure a normalised counts matrix has been generated
under the Normalised counts Tab prior to generating plots."),
h4("Generate PCA Plot:"),
actionButton(ns("Generate_PCA_Plot"), label = "Generate PCA Plot"),
plotOutput(outputId = ns("PCA_Plot")),
downloadButton(outputId = ns("downloadPCA"), label = "Save Plot")),
tabPanel("Differential Gene Expression Analysis",
h3("Mandatory Inputs:"),
selectInput(inputId = ns("DEGControlGroup"),
label = "Please choose control group for comparison.",
choices = c("NONE FOUND"), selected = "NONE FOUND"),
p("Select a control group to use as the baseline for identifying
differentially expressed genes"),
selectInput(inputId = ns("DEGTestGroup"),
label = "Please choose test group for comparison.",
choices = "NONE FOUND", selected = "NONE FOUND"),
p("Select a group to identify differentially expressed genes for against the above control."),
selectInput(inputId = ns("DEGGeneSet"),
label = "Choose gene set to identify:",
choices = c("Upregulated Genes", "Downregulated Genes", "All DEG's"),
selected = ("All DEG's")),
actionButton(ns("generateDEGs"), label = "Generate DEG List"),
h3("Differentially Expressed Genes based on your criteria:"),
downloadButton(outputId = ns("downloadDEGs"), label = "Download as CSV"),
tableOutput(outputId = ns("DEGList"))
)
)
)))
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
tagList(
titlePanel(title = "Normalisation and DEG Analysis:"),
sidebarLayout(sidebarPanel(h3("Mandatory Settings:"),
#Add option to input raw count matrix as CSV file.
fileInput(inputId = ns("rawcounts_file"),
label = "Select raw count matrix:",
multiple = FALSE,
accept = ".csv",
buttonLabel = "Browse",
placeholder = "No file selected."),
#Add option to input sample info file as CSC file.
fileInput(inputId = ns("sampleinfo_file"),
label = "Select sample information file:",
multiple = FALSE,
accept = ".csv",
buttonLabel = "Browse",
placeholder = "No file selected."),
#Add option for user to change minimum count threshold
numericInput(inputId = ns("minCountCutoff"),
label = "Minimum average expression cutoff:",
min = 1,
value = 30,
width = "150px"),
#Add mandatory settings for Differential gene expression.
h3("Settings for DEG Analysis:"),
numericInput(inputId = ns("pvalueThreshold"),
label = ("P-value threshhold."),
min = 0.000001,
max = 1,
value = 0.05,
width = "150px"),
numericInput(inputId = ns("logFoldChangeThreshold"),
label = "Log2Fold Change threshold (As positive number).",
min = 0.001,
max = 100,
value = 1.4,
width = "150px")
),
mainPanel(tabsetPanel(type = "tabs",
tabPanel("Pre-normalisation Checks",
#Verify files:
h2(textOutput(ns("pre_normalisation_checker"))),
#Uploaded header of rawcounts file.
h3("Raw Counts File:"),
tableOutput(ns("rawcounts_file_table")),
#Upload sample Information file.
h3("Sample Information File:"),
tableOutput(ns("sampleinfo_file_table"))),
#Create normalised count matrix using DESEQ2.
tabPanel("Normalised Counts",
h3("Once Pre-normalisation check are complete:"),
selectInput(inputId = ns("experimental_Condition"),
label = "Please select your experimental condtion:", choices = c(""), selected = ""),
actionButton(ns("generate_Normalised_Counts"), "Generate Normalised Count Table"),
tableOutput(outputId = ns("normalisedCountTable")),
add_busy_bar(color = "#FF0000"),
downloadButton(outputId = ns("downloadNormcounts"), label = "Download Normalised Count Matrix")),
#Visualisation and Quality control of normalised counts.
tabPanel("Normalisation Quality Control",
h3("Post Normalisation Quality Control:"),
p("Please make sure a normalised counts matrix has been generated
under the Normalised counts Tab prior to generating plots."),
h4("Generate PCA Plot:"),
actionButton(ns("Generate_PCA_Plot"), label = "Generate PCA Plot"),
plotOutput(outputId = ns("PCA_Plot")),
downloadButton(outputId = ns("downloadPCA"), label = "Save Plot")),
tabPanel("Differential Gene Expression Analysis",
h3("Mandatory Inputs:"),
selectInput(inputId = ns("DEGControlGroup"),
label = "Please choose control group for comparison.",
choices = c("NONE FOUND"), selected = "NONE FOUND"),
p("Select a control group to use as the baseline for identifying
differentially expressed genes"),
selectInput(inputId = ns("DEGTestGroup"),
label = "Please choose test group for comparison.",
choices = "NONE FOUND", selected = "NONE FOUND"),
p("Select a group to identify differentially expressed genes for against the above control."),
selectInput(inputId = ns("DEGGeneSet"),
label = "Choose gene set to identify:",
choices = c("Upregulated Genes", "Downregulated Genes", "All DEG's"),
selected = ("All DEG's")),
actionButton(ns("generateDEGs"), label = "Generate DEG List"),
h3("Differentially Expressed Genes based on your criteria:"),
downloadButton(outputId = ns("downloadDEGs"), label = "Download as CSV"),
tableOutput(outputId = ns("DEGList"))
)
)
)))
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
shiny::runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
#Libraries
library(shiny)
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
source("D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential/R/IndividualGene.r")
source("D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential/R/IndividualGene.r")
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
source("D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential/R/IndividualGene.r")
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
source("D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential/R/IndividualGene.r")
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
source("D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential/R/IndividualGene.r")
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
source("D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential/R/IndividualGene.r")
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
library(shiny)
library(shiny)
source("D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential/R/IndividualGene.r")
install.packages("dqshiny")
installed.packages(dqshiny)
installed.packages("dqshiny")
shinyApp(
ui = fluidPage(
fluidRow(
column(3,
autocomplete_input("auto1", "Unnamed:", opts, max_options = 1000),
autocomplete_input("auto2", "Named:", max_options = 1000,
structure(opts, names = opts[order(opts)]))
# feel free to test this with select... and may get yourself a coffee
# , selectInput("sel", "Select:", opts)
), column(3,
tags$label("Value:"), verbatimTextOutput("val1", placeholder = TRUE),
tags$label("Value:"), verbatimTextOutput("val2", placeholder = TRUE)
)
)
),
server = function(input, output) {
output$val1 <- renderText(as.character(input$auto1))
output$val2 <- renderText(as.character(input$auto2))
}
)
library(shiny)
library(dqshiny)
install.packages("dqshiny")
shiny::runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
testraw <- read_excel("All_Tissue_Normcounts.xlsx", sheet = 1)
colnames(testraw)[1] <- "geneID"
setwd("D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential/Data")
testraw <- read_excel("All_Tissue_Normcounts.xlsx", sheet = 1)
colnames(testraw)[1] <- "geneID"
test <- column_to_rownames(testraw, "geneID")
test2 <- geneInfo <- melt(as.matrix(tissueInfo[paste0("FBgn0001258"), ]))
test2 <- melt(as.matrix(test[paste0("FBgn0001258"), ]))
View(test)
View(test2)
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
moduleServer(id, function(input, output, session){
#Require a gene to be selected.
#req(input$geneToView)
output$IndividualGeneCountGraph <- renderTable({
#Create empty list to store genecounts.
geneCountList <- list()
#For each Tissue/Sheet in normalised count file. Extract the normalised counts for the gene on interest.
for (i in 1:3){
#Read in gene data for each tissue and index by geneID.
tissueInfo<- read_excel("./Data/All_Tissue_Normcounts.xlsx", sheet = i)
colnames(tissueInfo)[1] <- "geneID"
tissueInfo <- column_to_rownames(tissueInfo, "geneID")
#Grab row user is interested in
geneInfo <- melt(as.matrix(tissueInfo[input$geneToView, ]))
colnames(geneInfo) <- c("Gene_ID", "Genotype", "Number of Counts")
#Append tissue gene count to list.
geneCountList <- append(geneInfo, geneCountList)
}
geneCountList[[1]]
}, striped = TRUE)}
)}
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
?append
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp()
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
testraw <- read_excel("All_Tissue_Normcounts.xlsx", sheet = 1)
colnames(testraw)[1] <- "geneID"
test <- column_to_rownames(testraw, "geneID")
test2 <- melt(as.matrix(test[paste0("FBgn0001258"), ]))
colnames(geneInfo) <- c("Gene_ID", "Genotype", "Number of Counts")
colnames(test2) <- c("Gene_ID", "Genotype", "Number of Counts")
View(test2)
final <- formatcells(test2)
formatcells <- function(df){
df$Genotype <- ifelse(grepl("PtcG4_D6", wantedGenesTable$Genotype), "PtcG4_D6",
ifelse(grepl("RasYki_D5", wantedGenesTable$Genotype), "RasYki_D5",
ifelse(grepl("RasYki_D8", wantedGenesTable$Genotype), "RasYki_D8",
ifelse(grepl("Fer12OG_D6", wantedGenesTable$Genotype), "Fer12OG_D6",
ifelse(grepl("Fer12OG_D8", wantedGenesTable$Genotype), "Fer12OG_D8",
ifelse(grepl("Fer12WT_D6", wantedGenesTable$Genotype), "Fer12WT_D6",
ifelse(grepl("ImpL2i_D6", wantedGenesTable$Genotype), "ImpL2i_D6", "ImpL2i_D8" )))))))
}
final <- formatcells(test2)
df$Genotype <- ifelse(grepl("PtcG4_D6", df$Genotype), "PtcG4_D6",
ifelse(grepl("RasYki_D5", df$Genotype), "RasYki_D5",
ifelse(grepl("RasYki_D8", df$Genotype), "RasYki_D8",
ifelse(grepl("Fer12OG_D6", df$Genotype), "Fer12OG_D6",
ifelse(grepl("Fer12OG_D8", df$Genotype), "Fer12OG_D8",
ifelse(grepl("Fer12WT_D6", df$Genotype), "Fer12WT_D6",
ifelse(grepl("ImpL2i_D6", df$Genotype), "ImpL2i_D6", "ImpL2i_D8" )))))))
df$Genotype <- ifelse(grepl("PtcG4_D6", df$Genotype), "PtcG4_D6",
ifelse(grepl("RasYki_D5", df$Genotype), "RasYki_D5",
ifelse(grepl("RasYki_D8", df$Genotype), "RasYki_D8",
ifelse(grepl("Fer12OG_D6", df$Genotype), "Fer12OG_D6",
ifelse(grepl("Fer12OG_D8", df$Genotype), "Fer12OG_D8",
ifelse(grepl("Fer12WT_D6", df$Genotype), "Fer12WT_D6",
ifelse(grepl("ImpL2i_D6", df$Genotype), "ImpL2i_D6", "ImpL2i_D8" )))))))
formatcells <- function(df){
df$Genotype <- ifelse(grepl("PtcG4_D6", df$Genotype), "PtcG4_D6",
ifelse(grepl("RasYki_D5", df$Genotype), "RasYki_D5",
ifelse(grepl("RasYki_D8", df$Genotype), "RasYki_D8",
ifelse(grepl("Fer12OG_D6", df$Genotype), "Fer12OG_D6",
ifelse(grepl("Fer12OG_D8", df$Genotype), "Fer12OG_D8",
ifelse(grepl("Fer12WT_D6", df$Genotype), "Fer12WT_D6",
ifelse(grepl("ImpL2i_D6", df$Genotype), "ImpL2i_D6", "ImpL2i_D8" )))))))
}
final <- formatcells(test2)
test2$Genotype <- formatcells(test2)
View(test2)
formatcells <- function(df){
df$Genotype <- ifelse(grepl("PtcG4_D6", df$Genotype), "PtcG4_D6",
ifelse(grepl("RasYki_D5", df$Genotype), "RasYki_D5",
ifelse(grepl("RasYki_D8", df$Genotype), "RasYki_D8",
ifelse(grepl("Fer12OG_D6", df$Genotype), "Fer12OG_D6",
ifelse(grepl("Fer12OG_D8", df$Genotype), "Fer12OG_D8",
ifelse(grepl("Fer12WT_D6", df$Genotype), "Fer12WT_D6",
ifelse(grepl("ImpL2i_D6", df$Genotype), "ImpL2i_D6",
ifelse(grepl("ImpL2i_D8", df$Genotype), "ImpL2i_D8",
ifelse(grepl("Yw_D6", df$Genotype), "Yw_D6", "Yw_D8"))))))))
}
test2$Genotype <- formatcells(test2)
formatcells <- function(df){
df$Genotype <- ifelse(grepl("PtcG4_D6", df$Genotype), "PtcG4_D6",
ifelse(grepl("RasYki_D5", df$Genotype), "RasYki_D5",
ifelse(grepl("RasYki_D8", df$Genotype), "RasYki_D8",
ifelse(grepl("Fer12OG_D6", df$Genotype), "Fer12OG_D6",
ifelse(grepl("Fer12OG_D8", df$Genotype), "Fer12OG_D8",
ifelse(grepl("Fer12WT_D6", df$Genotype), "Fer12WT_D6",
ifelse(grepl("ImpL2i_D6", df$Genotype), "ImpL2i_D6",
ifelse(grepl("ImpL2i_D8", df$Genotype), "ImpL2i_D8",
ifelse(grepl("Yw_D6", df$Genotype), "Yw_D6", "Yw_D8"))))))))
}
test2$Genotype <- formatcells(test2)
formatcells <- function(df){
df$Genotype <- ifelse(grepl("PtcG4_D6", df$Genotype), "PtcG4_D6",
ifelse(grepl("RasYki_D5", df$Genotype), "RasYki_D5",
ifelse(grepl("RasYki_D8", df$Genotype), "RasYki_D8",
ifelse(grepl("Fer12OG_D6", df$Genotype), "Fer12OG_D6",
ifelse(grepl("Fer12OG_D8", df$Genotype), "Fer12OG_D8",
ifelse(grepl("Fer12WT_D6", df$Genotype), "Fer12WT_D6",
ifelse(grepl("ImpL2i_D6", df$Genotype), "ImpL2i_D6",
ifelse(grepl("ImpL2i_D8", df$Genotype), "ImpL2i_D8",
ifelse(grepl("Yw_D6", df$Genotype), "Yw_D6", "Yw_D8")))))))))
formatcells <- function(df){
df$Genotype <- ifelse(grepl("PtcG4_D6", df$Genotype), "PtcG4_D6",
ifelse(grepl("RasYki_D5", df$Genotype), "RasYki_D5",
ifelse(grepl("RasYki_D8", df$Genotype), "RasYki_D8",
ifelse(grepl("Fer12OG_D6", df$Genotype), "Fer12OG_D6",
ifelse(grepl("Fer12OG_D8", df$Genotype), "Fer12OG_D8",
ifelse(grepl("Fer12WT_D6", df$Genotype), "Fer12WT_D6",
ifelse(grepl("ImpL2i_D6", df$Genotype), "ImpL2i_D6",
ifelse(grepl("ImpL2i_D8", df$Genotype), "ImpL2i_D8",
ifelse(grepl("Yw_D6", df$Genotype), "Yw_D6", "Yw_D8")))))))))
}
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
#Plot
facetPlot <- ggplot(geneInfo, aes(x = Genotype, y = Normcount, color = Genotype)) +
geom_point() +
facet_grid(~Gene_ID) +
theme(axis.text.x = element_text(angle = 90), legend.position = "none")
plot(facetPlot)
#Plot
facetPlot <- ggplot(geneInfo, aes(x = Genotype, y = Normcount, color = Genotype)) +
geom_point() +
facet_grid(~Gene_ID) +
theme(axis.text.x = element_text(angle = 90), legend.position = "none")
plot(facetPlot)
testraw <- read_excel("All_Tissue_Normcounts.xlsx", sheet = 1)
colnames(testraw)[1] <- "geneID"
test <- column_to_rownames(testraw, "geneID")
test2 <- melt(as.matrix(test[paste0("FBgn0001258"), ]))
colnames(test2) <- c("Gene_ID", "Genotype", "Normcount")
formatcells <- function(df){
df$Genotype <- ifelse(grepl("PtcG4_D6", df$Genotype), "PtcG4_D6",
ifelse(grepl("RasYki_D5", df$Genotype), "RasYki_D5",
ifelse(grepl("RasYki_D8", df$Genotype), "RasYki_D8",
ifelse(grepl("Fer12OG_D6", df$Genotype), "Fer12OG_D6",
ifelse(grepl("Fer12OG_D8", df$Genotype), "Fer12OG_D8",
ifelse(grepl("Fer12WT_D6", df$Genotype), "Fer12WT_D6",
ifelse(grepl("ImpL2i_D6", df$Genotype), "ImpL2i_D6",
ifelse(grepl("ImpL2i_D8", df$Genotype), "ImpL2i_D8",
ifelse(grepl("Yw_D6", df$Genotype), "Yw_D6", "Yw_D8")))))))))
}
test2$Genotype <- formatcells(test2)
#Plot
facetPlot <- ggplot(geneInfo, aes(x = Genotype, y = Normcount, color = Genotype)) +
geom_point() +
facet_grid(~Gene_ID) +
theme(axis.text.x = element_text(angle = 90), legend.position = "none")
plot(facetPlot)
#Plot
facetPlot <- ggplot(test2, aes(x = Genotype, y = Normcount, color = Genotype)) +
geom_point() +
facet_grid(~Gene_ID) +
theme(axis.text.x = element_text(angle = 90), legend.position = "none")
plot(facetPlot)
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
View(test2)
testraw <- read_excel("All_Tissue_Normcounts.xlsx", sheet = 1)
colnames(testraw)[1] <- "geneID"
test <- column_to_rownames(testraw, "geneID")
test2 <- melt(as.matrix(test[paste0("FBgn0001258"), ]))
colnames(test2) <- c("Gene_ID", "Genotype", "Normcount")
formatcells <- function(df){
df$Genotype <- ifelse(grepl("PtcG4_D6", df$Genotype), "PtcG4_D6",
ifelse(grepl("RasYki_D5", df$Genotype), "RasYki_D5",
ifelse(grepl("RasYki_D8", df$Genotype), "RasYki_D8",
ifelse(grepl("Fer12OG_D6", df$Genotype), "Fer12OG_D6",
ifelse(grepl("Fer12OG_D8", df$Genotype), "Fer12OG_D8",
ifelse(grepl("Fer12WT_D6", df$Genotype), "Fer12WT_D6",
ifelse(grepl("ImpL2i_D6", df$Genotype), "ImpL2i_D6",
ifelse(grepl("ImpL2i_D8", df$Genotype), "ImpL2i_D8",
ifelse(grepl("Yw_D6", df$Genotype), "Yw_D6", "Yw_D8")))))))))
}
test2$Genotype <- formatcells(test2)
View(test2)
colnames(test2) <- c("Gene_ID", "Genotype", "Normcount")
View(test2)
test <- column_to_rownames(testraw, "geneID")
testraw <- read_excel("All_Tissue_Normcounts.xlsx", sheet = 1)
colnames(testraw)[1] <- "geneID"
test <- column_to_rownames(testraw, "geneID")
test2 <- melt(as.matrix(test[paste0("FBgn0001258"), ]))
colnames(test2) <- c("Gene_ID", "Genotype", "Normcount")
formatcells <- function(df){
df$Genotype <- ifelse(grepl("PtcG4_D6", df$Genotype), "PtcG4_D6",
ifelse(grepl("RasYki_D5", df$Genotype), "RasYki_D5",
ifelse(grepl("RasYki_D8", df$Genotype), "RasYki_D8",
ifelse(grepl("Fer12OG_D6", df$Genotype), "Fer12OG_D6",
ifelse(grepl("Fer12OG_D8", df$Genotype), "Fer12OG_D8",
ifelse(grepl("Fer12WT_D6", df$Genotype), "Fer12WT_D6",
ifelse(grepl("ImpL2i_D6", df$Genotype), "ImpL2i_D6",
ifelse(grepl("ImpL2i_D8", df$Genotype), "ImpL2i_D8",
ifelse(grepl("Yw_D6", df$Genotype), "Yw_D6", "Yw_D8")))))))))
}
test2$Genotype <- formatcells(test2)
#Plot
facetPlot <- ggplot(test2, aes(x = Genotype, y = Normcount, color = Genotype)) +
geom_point() +
facet_grid(~Gene_ID) +
theme(axis.text.x = element_text(angle = 90), legend.position = "none")
plot(facetPlot)
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
runApp('D:/RNA-seq_DEG_Stats (2023 Experiment)/FH_Differential/FH_Differential')
#Source heatmap_string file - contains hardcoded function needed to reset genotype IDs during plot generation.
source("./R/HeatmapStrings.R")
#Read Raw data.
geneIDs <- read_excel("./Data/All_Tissue_Normcounts.xlsx", sheet = 1)
